
atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000318  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  00000318  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000347  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000355  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b14  00000000  00000000  000003a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000076a  00000000  00000000  00000eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000032a  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001da  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000256  00000256  0000030a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.UART_init 00000028  000001f2  000001f2  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.UART_send 0000000e  00000248  00000248  000002fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_18 0000004a  0000017e  0000017e  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_10 0000005c  00000122  00000122  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.init    0000002a  000001c8  000001c8  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.main    00000018  0000021a  0000021a  000002ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .progmemx.data.char_lookup 0000005f  000000c2  000000c2  00000176  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 22 .text.__dummy_fini 00000002  0000025e  0000025e  00000312  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_funcs_on_exit 00000002  00000260  00000260  00000314  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_simulator_exit 00000002  00000262  00000262  00000316  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.exit    00000016  00000232  00000232  000002e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text._Exit   00000004  0000025a  0000025a  0000030e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
   8:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
   c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  10:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  14:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  18:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  1c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  20:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  24:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_10>
  2c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  30:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  34:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  38:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  3c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  40:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  44:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  48:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_18>
  4c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  50:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  54:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  58:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  5c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  60:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
  64:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0b       	sbc	r16, r17
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  ba:	0c 94 19 01 	jmp	0x232	; 0x232 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000256 <__bad_interrupt>:
 256:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.UART_init:

000001f2 <UART_init>:

void UART_init()
{
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
 1f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)BAUD_PRESCALER;
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1fc:	e1 ec       	ldi	r30, 0xC1	; 193
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	88 e1       	ldi	r24, 0x18	; 24
 202:	80 83       	st	Z, r24
	/* Set frame format: 2 stop bits, 8 data bits */
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
 204:	a2 ec       	ldi	r26, 0xC2	; 194
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	86 e0       	ldi	r24, 0x06	; 6
 20a:	8c 93       	st	X, r24
	UCSR0C |= (1<<USBS0); // 2 stop bits
 20c:	8c 91       	ld	r24, X
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	8c 93       	st	X, r24
	
	UCSR0B |= (1<<RXCIE0);
 212:	80 81       	ld	r24, Z
 214:	80 68       	ori	r24, 0x80	; 128
 216:	80 83       	st	Z, r24
 218:	08 95       	ret

Disassembly of section .text.UART_send:

00000248 <UART_send>:
}

void UART_send(unsigned char data)
{
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 248:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 24c:	95 ff       	sbrs	r25, 5
 24e:	fc cf       	rjmp	.-8      	; 0x248 <UART_send>
	// Put data into buffer and send data
	UDR0 = data;
 250:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 254:	08 95       	ret

Disassembly of section .text.__vector_18:

0000017e <__vector_18>:
		StringPtr++;
	}
}
char rcv;
ISR(USART_RX_vect)
{
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	8f 93       	push	r24
 18a:	9f 93       	push	r25
 18c:	af 93       	push	r26
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	rcv = UDR0;
 192:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 196:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <rcv>
	PORTD = char_lookup[rcv-' '];
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	80 97       	sbiw	r24, 0x20	; 32
 19e:	09 2e       	mov	r0, r25
 1a0:	00 0c       	add	r0, r0
 1a2:	aa 0b       	sbc	r26, r26
 1a4:	8e 53       	subi	r24, 0x3E	; 62
 1a6:	9f 4f       	sbci	r25, 0xFF	; 255
 1a8:	af 4f       	sbci	r26, 0xFF	; 255
 1aa:	fc 01       	movw	r30, r24
 1ac:	84 91       	lpm	r24, Z
 1ae:	a7 fd       	sbrc	r26, 7
 1b0:	80 81       	ld	r24, Z
 1b2:	8b b9       	out	0x0b, r24	; 11
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

Disassembly of section .text.__vector_10:

00000122 <__vector_10>:
	while(*StringPtr != 0x00)
	{
		UART_send(*StringPtr);
		StringPtr++;
	}
}
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
 144:	8e e6       	ldi	r24, 0x6E	; 110
 146:	0e 94 24 01 	call	0x248	; 0x248 <UART_send>
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	80 e7       	ldi	r24, 0x70	; 112
 14e:	92 e0       	ldi	r25, 0x02	; 2
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <__vector_10+0x2e>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_10+0x38>
 15a:	00 00       	nop
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

Disassembly of section .text.init:

000001c8 <init>:
	_delay_ms(50);
}

void init()
{
	cli();
 1c8:	f8 94       	cli
	UART_init();
 1ca:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <UART_init>
	DDRB |= (1<<PORTB5);
 1ce:	84 b1       	in	r24, 0x04	; 4
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
 1d4:	84 b1       	in	r24, 0x04	; 4
 1d6:	8c 6f       	ori	r24, 0xFC	; 252
 1d8:	84 b9       	out	0x04, r24	; 4
	TCCR1B |= (1<<ICES1) | (1<<ICNC1);
 1da:	e1 e8       	ldi	r30, 0x81	; 129
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	80 6c       	ori	r24, 0xC0	; 192
 1e2:	80 83       	st	Z, r24
	TIMSK1 |= (1<<ICIE1);
 1e4:	ef e6       	ldi	r30, 0x6F	; 111
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	80 83       	st	Z, r24
	sei();	
 1ee:	78 94       	sei
 1f0:	08 95       	ret

Disassembly of section .text.main:

0000021a <main>:

char str1[10];
int flag=1;
int main(void)
{
	init();
 21a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	83 ed       	ldi	r24, 0xD3	; 211
 222:	90 e3       	ldi	r25, 0x30	; 48
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0xa>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x14>
 22e:	00 00       	nop
 230:	ff cf       	rjmp	.-2      	; 0x230 <main+0x16>

Disassembly of section .text.__dummy_fini:

0000025e <_fini>:
 25e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000260 <__funcs_on_exit>:
 260:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000262 <__simulator_exit>:
 262:	08 95       	ret

Disassembly of section .text.exit:

00000232 <exit>:
 232:	ec 01       	movw	r28, r24
 234:	0e 94 30 01 	call	0x260	; 0x260 <__funcs_on_exit>
 238:	0e 94 2f 01 	call	0x25e	; 0x25e <_fini>
 23c:	ce 01       	movw	r24, r28
 23e:	0e 94 31 01 	call	0x262	; 0x262 <__simulator_exit>
 242:	ce 01       	movw	r24, r28
 244:	0e 94 2d 01 	call	0x25a	; 0x25a <_Exit>

Disassembly of section .text._Exit:

0000025a <_Exit>:
 25a:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
