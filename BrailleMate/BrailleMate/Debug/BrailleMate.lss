
BrailleMate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000017c  00800100  00000c00  00000c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080027c  0080027c  00000e10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000112e  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a45  00000000  00000000  000020d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df2  00000000  00000000  00002b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  0000390c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007dfc  00000000  00000000  00003bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085d  00000000  00000000  0000b9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000c209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000032f3  00000000  00000000  0000c2d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c2       	rjmp	.+1152   	; 0x48e <__vector_3>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	fb c1       	rjmp	.+1014   	; 0x420 <__vector_10>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	24 c2       	rjmp	.+1096   	; 0x47a <__vector_12>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	d0 c1       	rjmp	.+928    	; 0x3ea <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	ab c1       	rjmp	.+854    	; 0x3ac <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 37       	cpi	r26, 0x7C	; 124
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e7       	ldi	r26, 0x7C	; 124
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 39       	cpi	r26, 0x98	; 152
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	55 d0       	rcall	.+170    	; 0x146 <main>
  9c:	af c5       	rjmp	.+2910   	; 0xbfc <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <ADC_Init>:


void ADC_Init(void)
{
	/*Select Vref = AVcc*/
	ADMUX |= (1 << REFS0);
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	/*Trigger conversion on Timer0 compare match A*/
	ADCSRB |= (1 << ADTS0) | (1 << ADTS2);
  aa:	eb e7       	ldi	r30, 0x7B	; 123
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	80 83       	st	Z, r24
	/*Enable ADC conversion, auto trigger and interrupt generate */
	ADCSRA |= (1 << ADEN) | (1 << ADATE) | (1 << ADIE);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 6a       	ori	r24, 0xA8	; 168
  bc:	80 83       	st	Z, r24
	/*start ADC cpnversion*/
	ADCSRA |= (1 << ADSC);
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <Buzzer_PWMInit>:
	
}

void Buzzer_PWMInit(void)
{
    DDRB |= (1 << PB3);
  c6:	23 9a       	sbi	0x04, 3	; 4
    /*Set to CTC mode and toggle OC0A for every output compare match*/
    TCCR2A |= (1 << WGM20) | (1 << COM2A0);
  c8:	e0 eb       	ldi	r30, 0xB0	; 176
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 64       	ori	r24, 0x41	; 65
  d0:	80 83       	st	Z, r24
    /*Set Prescaler Value for TIMER0 to 256*/
    TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << WGM22);
  d2:	e1 eb       	ldi	r30, 0xB1	; 177
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8e 60       	ori	r24, 0x0E	; 14
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <TimerInit>:
}

void TimerInit(void)
{
	//Enable prescaling for clock source
	CLKPR |= (1 << CLKPCE);
  de:	e1 e6       	ldi	r30, 0x61	; 97
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	/*CTC mode*/
	//Setting 16-bit control register:Prescaling = 1024 for input compare register
	TCCR1B |= (1 << CS12);// | (1<<CS10);//|(1 << WGM12);
  e8:	e1 e8       	ldi	r30, 0x81	; 129
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	80 83       	st	Z, r24
	/*Hit and trial value for tick tick big enough*/
	OCR1B = 200;
  f2:	88 ec       	ldi	r24, 0xC8	; 200
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
  fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	//Enable output compare interrupt for output compare B
	TIMSK1 |= (1<< OCIE1B);
  fe:	ef e6       	ldi	r30, 0x6F	; 111
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <Initialize>:

/***************************Function Definitions*****************************/
void Initialize(void)
{
    //disable interrupt
	cli();
 10a:	f8 94       	cli
	//UART_init();
	DDRD |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
 10c:	8a b1       	in	r24, 0x0a	; 10
 10e:	8c 6f       	ori	r24, 0xFC	; 252
 110:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<PORTB2);
 112:	22 98       	cbi	0x04, 2	; 4
	PCICR |= (1<<PCIE0);
 114:	e8 e6       	ldi	r30, 0x68	; 104
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);
 11e:	eb e6       	ldi	r30, 0x6B	; 107
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 60       	ori	r24, 0x04	; 4
 126:	80 83       	st	Z, r24
	TimerInit();
 128:	da df       	rcall	.-76     	; 0xde <TimerInit>
	ADC_Init();
 12a:	ba df       	rcall	.-140    	; 0xa0 <ADC_Init>
	Buzzer_PWMInit();
 12c:	cc df       	rcall	.-104    	; 0xc6 <Buzzer_PWMInit>
 12e:	55 d2       	rcall	.+1194   	; 0x5da <speaker_begin>
	speaker_begin();
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	90 e3       	ldi	r25, 0x30	; 48
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <Initialize+0x2c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <Initialize+0x36>
 140:	00 00       	nop
 142:	78 94       	sei
 144:	08 95       	ret

00000146 <main>:
	_delay_ms(1000);
	sei();
 146:	f8 94       	cli
 148:	22 98       	cbi	0x04, 2	; 4
{
    //Initialize();
	/*Mode Sel push button*/
	cli();
	DDRB &= ~(1<<PORTB2);
	PCICR |= (1<<PCIE0);
 14a:	e8 e6       	ldi	r30, 0x68	; 104
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);
 154:	eb e6       	ldi	r30, 0x6B	; 107
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	80 83       	st	Z, r24
	char ChSel = 0;
	uint8_t ChCount = -1;
	int16_t offset = 0;	
	UART_init();
 15e:	4c d2       	rcall	.+1176   	; 0x5f8 <UART_init>
	sei();
 160:	78 94       	sei
	cli();
	DDRB &= ~(1<<PORTB2);
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT2);
	char ChSel = 0;
	uint8_t ChCount = -1;
 162:	1f ef       	ldi	r17, 0xFF	; 255
	/*Mode Sel push button*/
	cli();
	DDRB &= ~(1<<PORTB2);
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT2);
	char ChSel = 0;
 164:	71 2c       	mov	r7, r1
				
				cli();
				//UART_init();
				DDRB |= (1<<PORTB5);
				DDRB |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
				TCCR1B |= (1<<ICES1) | (1<<ICNC1);
 166:	0f 2e       	mov	r0, r31
 168:	f1 e8       	ldi	r31, 0x81	; 129
 16a:	cf 2e       	mov	r12, r31
 16c:	d1 2c       	mov	r13, r1
 16e:	f0 2d       	mov	r31, r0
				TIMSK1 |= (1<<ICIE1);
 170:	0f 2e       	mov	r0, r31
 172:	ff e6       	ldi	r31, 0x6F	; 111
 174:	ef 2e       	mov	r14, r31
 176:	f1 2c       	mov	r15, r1
 178:	f0 2d       	mov	r31, r0
				DDRB &= ~(1<<PORTB2);
				PCICR |= (1<<PCIE0);
				PCMSK0 |= (1<<PCINT2);
 17a:	cb e6       	ldi	r28, 0x6B	; 107
 17c:	d0 e0       	ldi	r29, 0x00	; 0
				UART_putstring(String);
				sprintf(String,"LEarning Mode init\r\n");
				UART_putstring(String);
				sprintf(String,"Leartning Mode init\r\n");
				UART_putstring(String);
				eModeEx = Run;
 17e:	66 24       	eor	r6, r6
 180:	63 94       	inc	r6
				if((400 < adc_read) && (adc_read < 600))
				{
					if(ChSel)
					{
						ChSel = 0;
						ChCount = ChCount%36;
 182:	0f 2e       	mov	r0, r31
 184:	f9 e3       	ldi	r31, 0x39	; 57
 186:	2f 2e       	mov	r2, r31
 188:	f0 2d       	mov	r31, r0
				}
				if((400 < adc_read) && (adc_read < 600))
				{
					if(ChSel)
					{
						ChSel = 0;
 18a:	41 2c       	mov	r4, r1
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
					adc_read  = 1024 ;//max impossible value for adc
 18c:	a1 2c       	mov	r10, r1
 18e:	68 94       	set
 190:	bb 24       	eor	r11, r11
 192:	b2 f8       	bld	r11, 2
						else
						{
							//sprintf(String,"Prev Character\n");
							//UART_SendData(String);
						}
						OCR2A = 70;
 194:	0f 2e       	mov	r0, r31
 196:	f3 eb       	ldi	r31, 0xB3	; 179
 198:	8f 2e       	mov	r8, r31
 19a:	91 2c       	mov	r9, r1
 19c:	f0 2d       	mov	r31, r0
 19e:	0f 2e       	mov	r0, r31
 1a0:	f6 e4       	ldi	r31, 0x46	; 70
 1a2:	3f 2e       	mov	r3, r31
 1a4:	f0 2d       	mov	r31, r0
	sei();
	while (1) // loop forever
	{
		//sprintf(String,"Mode selected%d\r\n",eModeSel);
		//UART_putstring(String);
		if(Reading == eModeSel)
 1a6:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <eModeSel>
 1aa:	81 11       	cpse	r24, r1
 1ac:	9c c0       	rjmp	.+312    	; 0x2e6 <main+0x1a0>
		{
			if(Init == eModeEx)
 1ae:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
 1b2:	81 11       	cpse	r24, r1
 1b4:	36 c0       	rjmp	.+108    	; 0x222 <main+0xdc>
			{
				sprintf(String,"Reading Mode init\r\n");
 1b6:	84 e1       	ldi	r24, 0x14	; 20
 1b8:	ec e0       	ldi	r30, 0x0C	; 12
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	af e7       	ldi	r26, 0x7F	; 127
 1be:	b2 e0       	ldi	r27, 0x02	; 2
 1c0:	01 90       	ld	r0, Z+
 1c2:	0d 92       	st	X+, r0
 1c4:	8a 95       	dec	r24
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x7a>
				UART_putstring(String);
 1c8:	8f e7       	ldi	r24, 0x7F	; 127
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	31 d2       	rcall	.+1122   	; 0x630 <UART_putstring>
				sprintf(String,"Reading Mode init\r\n");
 1ce:	84 e1       	ldi	r24, 0x14	; 20
 1d0:	ec e0       	ldi	r30, 0x0C	; 12
 1d2:	f1 e0       	ldi	r31, 0x01	; 1
 1d4:	af e7       	ldi	r26, 0x7F	; 127
 1d6:	b2 e0       	ldi	r27, 0x02	; 2
 1d8:	01 90       	ld	r0, Z+
 1da:	0d 92       	st	X+, r0
 1dc:	8a 95       	dec	r24
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x92>
				UART_putstring(String);
 1e0:	8f e7       	ldi	r24, 0x7F	; 127
 1e2:	92 e0       	ldi	r25, 0x02	; 2
 1e4:	25 d2       	rcall	.+1098   	; 0x630 <UART_putstring>
				sprintf(String,"Reading Mode init\r\n");
 1e6:	84 e1       	ldi	r24, 0x14	; 20
 1e8:	ec e0       	ldi	r30, 0x0C	; 12
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	af e7       	ldi	r26, 0x7F	; 127
 1ee:	b2 e0       	ldi	r27, 0x02	; 2
 1f0:	01 90       	ld	r0, Z+
 1f2:	0d 92       	st	X+, r0
 1f4:	8a 95       	dec	r24
				UART_putstring(String);
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0xaa>
 1f8:	8f e7       	ldi	r24, 0x7F	; 127
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	19 d2       	rcall	.+1074   	; 0x630 <UART_putstring>
				sprintf(String,"Reading Mode init\r\n");
 1fe:	84 e1       	ldi	r24, 0x14	; 20
 200:	ec e0       	ldi	r30, 0x0C	; 12
 202:	f1 e0       	ldi	r31, 0x01	; 1
 204:	af e7       	ldi	r26, 0x7F	; 127
 206:	b2 e0       	ldi	r27, 0x02	; 2
 208:	01 90       	ld	r0, Z+
 20a:	0d 92       	st	X+, r0
 20c:	8a 95       	dec	r24
				UART_putstring(String);
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0xc2>
 210:	8f e7       	ldi	r24, 0x7F	; 127
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	0d d2       	rcall	.+1050   	; 0x630 <UART_putstring>
				Initialize();
 216:	79 df       	rcall	.-270    	; 0x10a <Initialize>
 218:	60 92 7c 02 	sts	0x027C, r6	; 0x80027c <__data_end>
				ChSel = 0;
				ChCount = -1;
				offset = 0;
				eModeEx = Run;
 21c:	1f ef       	ldi	r17, 0xFF	; 255
				UART_putstring(String);
				sprintf(String,"Reading Mode init\r\n");
				UART_putstring(String);
				Initialize();
				ChSel = 0;
				ChCount = -1;
 21e:	74 2c       	mov	r7, r4
				sprintf(String,"Reading Mode init\r\n");
				UART_putstring(String);
				sprintf(String,"Reading Mode init\r\n");
				UART_putstring(String);
				Initialize();
				ChSel = 0;
 220:	c2 cf       	rjmp	.-124    	; 0x1a6 <main+0x60>
 222:	81 30       	cpi	r24, 0x01	; 1
				ChCount = -1;
				offset = 0;
				eModeEx = Run;
				
			}
			else  if(Run == eModeEx)
 224:	09 f0       	breq	.+2      	; 0x228 <main+0xe2>
 226:	bf cf       	rjmp	.-130    	; 0x1a6 <main+0x60>
 228:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			{
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
 22c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 230:	9c 01       	movw	r18, r24
 232:	29 55       	subi	r18, 0x59	; 89
 234:	32 40       	sbci	r19, 0x02	; 2
 236:	27 3a       	cpi	r18, 0xA7	; 167
 238:	31 40       	sbci	r19, 0x01	; 1
 23a:	20 f0       	brcs	.+8      	; 0x244 <main+0xfe>
 23c:	80 39       	cpi	r24, 0x90	; 144
 23e:	e1 e0       	ldi	r30, 0x01	; 1
 240:	9e 07       	cpc	r25, r30
 242:	30 f5       	brcc	.+76     	; 0x290 <main+0x14a>
 244:	81 15       	cp	r24, r1
				{
					offset = ((adc_read ) < 512)?-1:1;
 246:	92 40       	sbci	r25, 0x02	; 2
 248:	08 f4       	brcc	.+2      	; 0x24c <main+0x106>
 24a:	a6 c0       	rjmp	.+332    	; 0x398 <main+0x252>
 24c:	9d c0       	rjmp	.+314    	; 0x388 <main+0x242>
 24e:	11 11       	cpse	r17, r1
					adc_read  = 1024 ;//max impossible value for adc
					if(ChSel == 1)
					{
						//print
						if((offset < 0) && (ChCount == 0))
 250:	03 c0       	rjmp	.+6      	; 0x258 <main+0x112>
 252:	8f ef       	ldi	r24, 0xFF	; 255
			{
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
 254:	14 e2       	ldi	r17, 0x24	; 36
					if(ChSel == 1)
					{
						//print
						if((offset < 0) && (ChCount == 0))
						{
							ChCount = 36;
 256:	03 c0       	rjmp	.+6      	; 0x25e <main+0x118>
 258:	8f ef       	ldi	r24, 0xFF	; 255
			{
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
 25a:	01 c0       	rjmp	.+2      	; 0x25e <main+0x118>
 25c:	86 2d       	mov	r24, r6
 25e:	18 0f       	add	r17, r24
						//print
						if((offset < 0) && (ChCount == 0))
						{
							ChCount = 36;
						}
						ChCount += offset;
 260:	f4 01       	movw	r30, r8
						else
						{
							//sprintf(String,"Prev Character\n");
							//UART_SendData(String);
						}
						OCR2A = 70;
 262:	30 82       	st	Z, r3
 264:	ff ef       	ldi	r31, 0xFF	; 255
 266:	29 e6       	ldi	r18, 0x69	; 105
 268:	48 e1       	ldi	r20, 0x18	; 24
 26a:	f1 50       	subi	r31, 0x01	; 1
 26c:	20 40       	sbci	r18, 0x00	; 0
 26e:	40 40       	sbci	r20, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x124>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x12e>
 274:	00 00       	nop
 276:	f4 01       	movw	r30, r8
						_delay_ms(500);
						OCR2A = 0;
 278:	10 82       	st	Z, r1
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
						ChSel = 1;
						//sprintf(String,"Character sel started\n");
						//UART_SendData(String);
					}
				}
				if((400 < adc_read) && (adc_read < 600))
 27e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 282:	81 59       	subi	r24, 0x91	; 145
 284:	91 40       	sbci	r25, 0x01	; 1
 286:	87 3c       	cpi	r24, 0xC7	; 199
 288:	91 05       	cpc	r25, r1
 28a:	78 f0       	brcs	.+30     	; 0x2aa <main+0x164>
 28c:	76 2c       	mov	r7, r6
 28e:	8b cf       	rjmp	.-234    	; 0x1a6 <main+0x60>
 290:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 294:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 298:	81 59       	subi	r24, 0x91	; 145
 29a:	91 40       	sbci	r25, 0x01	; 1
 29c:	87 3c       	cpi	r24, 0xC7	; 199
 29e:	91 05       	cpc	r25, r1
 2a0:	08 f0       	brcs	.+2      	; 0x2a4 <main+0x15e>
 2a2:	81 cf       	rjmp	.-254    	; 0x1a6 <main+0x60>
 2a4:	77 20       	and	r7, r7
				{
					if(ChSel)
 2a6:	09 f4       	brne	.+2      	; 0x2aa <main+0x164>
 2a8:	7e cf       	rjmp	.-260    	; 0x1a6 <main+0x60>
 2aa:	12 9d       	mul	r17, r2
					{
						ChSel = 0;
						ChCount = ChCount%36;
 2ac:	81 2d       	mov	r24, r1
 2ae:	11 24       	eor	r1, r1
 2b0:	86 95       	lsr	r24
 2b2:	86 95       	lsr	r24
 2b4:	86 95       	lsr	r24
 2b6:	f4 e2       	ldi	r31, 0x24	; 36
 2b8:	8f 9f       	mul	r24, r31
 2ba:	10 19       	sub	r17, r0
 2bc:	11 24       	eor	r1, r1
 2be:	81 2f       	mov	r24, r17
						//sprintf(String,"INPUT READ = %c ch count = %d\n",char_value[ChCount],ChCount);
						//UART_SendData(String);
						PORTD = char_lookup[ChCount];
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	e0 5d       	subi	r30, 0xD0	; 208
 2c6:	fd 4f       	sbci	r31, 0xFD	; 253
 2c8:	20 81       	ld	r18, Z
 2ca:	2b b9       	out	0x0b, r18	; 11
 2cc:	fc 01       	movw	r30, r24
						/*speaker play module*/
						speaker_play(speaker_lookup[char_value[ChCount] - ' ']);
 2ce:	ea 5a       	subi	r30, 0xAA	; 170
 2d0:	fd 4f       	sbci	r31, 0xFD	; 253
 2d2:	e0 81       	ld	r30, Z
 2d4:	0e 2e       	mov	r0, r30
 2d6:	00 0c       	add	r0, r0
 2d8:	ff 0b       	sbc	r31, r31
 2da:	ee 5a       	subi	r30, 0xAE	; 174
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	80 81       	ld	r24, Z
 2e0:	77 d1       	rcall	.+750    	; 0x5d0 <speaker_play>
 2e2:	74 2c       	mov	r7, r4
				}
				if((400 < adc_read) && (adc_read < 600))
				{
					if(ChSel)
					{
						ChSel = 0;
 2e4:	60 cf       	rjmp	.-320    	; 0x1a6 <main+0x60>
 2e6:	81 30       	cpi	r24, 0x01	; 1
						speaker_play(speaker_lookup[char_value[ChCount] - ' ']);
					}
				}
			}
		}		
		else if(Learning == eModeSel)
 2e8:	09 f0       	breq	.+2      	; 0x2ec <main+0x1a6>
 2ea:	5d cf       	rjmp	.-326    	; 0x1a6 <main+0x60>
 2ec:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
		{
			//sprintf(String,"Learning Mode\n");
			//UART_putstring(String);
			if(Init == eModeEx)
 2f0:	81 11       	cpse	r24, r1
 2f2:	59 cf       	rjmp	.-334    	; 0x1a6 <main+0x60>
 2f4:	f8 94       	cli
			{
				
				cli();
 2f6:	25 9a       	sbi	0x04, 5	; 4
				//UART_init();
				DDRB |= (1<<PORTB5);
 2f8:	84 b1       	in	r24, 0x04	; 4
				DDRB |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
 2fa:	8c 6f       	ori	r24, 0xFC	; 252
 2fc:	84 b9       	out	0x04, r24	; 4
 2fe:	f6 01       	movw	r30, r12
				TCCR1B |= (1<<ICES1) | (1<<ICNC1);
 300:	80 81       	ld	r24, Z
 302:	80 6c       	ori	r24, 0xC0	; 192
 304:	80 83       	st	Z, r24
 306:	f7 01       	movw	r30, r14
				TIMSK1 |= (1<<ICIE1);
 308:	80 81       	ld	r24, Z
 30a:	80 62       	ori	r24, 0x20	; 32
 30c:	80 83       	st	Z, r24
 30e:	22 98       	cbi	0x04, 2	; 4
				DDRB &= ~(1<<PORTB2);
 310:	e8 e6       	ldi	r30, 0x68	; 104
				PCICR |= (1<<PCIE0);
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	81 60       	ori	r24, 0x01	; 1
 318:	80 83       	st	Z, r24
 31a:	88 81       	ld	r24, Y
				PCMSK0 |= (1<<PCINT2);
 31c:	84 60       	ori	r24, 0x04	; 4
 31e:	88 83       	st	Y, r24
 320:	78 94       	sei
				sei();
 322:	85 e1       	ldi	r24, 0x15	; 21
				sprintf(String,"Learning Mode init\r\n");
 324:	e0 e2       	ldi	r30, 0x20	; 32
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	af e7       	ldi	r26, 0x7F	; 127
 32a:	b2 e0       	ldi	r27, 0x02	; 2
 32c:	01 90       	ld	r0, Z+
 32e:	0d 92       	st	X+, r0
 330:	8a 95       	dec	r24
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0x1e6>
				UART_putstring(String);
 334:	8f e7       	ldi	r24, 0x7F	; 127
 336:	92 e0       	ldi	r25, 0x02	; 2
 338:	7b d1       	rcall	.+758    	; 0x630 <UART_putstring>
 33a:	85 e1       	ldi	r24, 0x15	; 21
				sprintf(String,"LEarning Mode init\r\n");
 33c:	e5 e3       	ldi	r30, 0x35	; 53
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	af e7       	ldi	r26, 0x7F	; 127
 342:	b2 e0       	ldi	r27, 0x02	; 2
 344:	01 90       	ld	r0, Z+
 346:	0d 92       	st	X+, r0
 348:	8a 95       	dec	r24
 34a:	e1 f7       	brne	.-8      	; 0x344 <main+0x1fe>
				UART_putstring(String);
 34c:	8f e7       	ldi	r24, 0x7F	; 127
 34e:	92 e0       	ldi	r25, 0x02	; 2
 350:	6f d1       	rcall	.+734    	; 0x630 <UART_putstring>
 352:	85 e1       	ldi	r24, 0x15	; 21
				sprintf(String,"LEarning Mode init\r\n");
 354:	e5 e3       	ldi	r30, 0x35	; 53
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	af e7       	ldi	r26, 0x7F	; 127
 35a:	b2 e0       	ldi	r27, 0x02	; 2
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x216>
				UART_putstring(String);
 364:	8f e7       	ldi	r24, 0x7F	; 127
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	63 d1       	rcall	.+710    	; 0x630 <UART_putstring>
 36a:	86 e1       	ldi	r24, 0x16	; 22
				sprintf(String,"Leartning Mode init\r\n");
 36c:	ea e4       	ldi	r30, 0x4A	; 74
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	af e7       	ldi	r26, 0x7F	; 127
 372:	b2 e0       	ldi	r27, 0x02	; 2
 374:	01 90       	ld	r0, Z+
 376:	0d 92       	st	X+, r0
 378:	8a 95       	dec	r24
 37a:	e1 f7       	brne	.-8      	; 0x374 <main+0x22e>
				UART_putstring(String);
 37c:	8f e7       	ldi	r24, 0x7F	; 127
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	57 d1       	rcall	.+686    	; 0x630 <UART_putstring>
 382:	60 92 7c 02 	sts	0x027C, r6	; 0x80027c <__data_end>
				eModeEx = Run;
 386:	0f cf       	rjmp	.-482    	; 0x1a6 <main+0x60>
 388:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
					adc_read  = 1024 ;//max impossible value for adc
 38c:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
 390:	f1 e0       	ldi	r31, 0x01	; 1
					if(ChSel == 1)
 392:	7f 12       	cpse	r7, r31
 394:	09 c0       	rjmp	.+18     	; 0x3a8 <main+0x262>
 396:	62 cf       	rjmp	.-316    	; 0x25c <main+0x116>
 398:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
					adc_read  = 1024 ;//max impossible value for adc
 39c:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
 3a0:	21 e0       	ldi	r18, 0x01	; 1
					if(ChSel == 1)
 3a2:	72 16       	cp	r7, r18
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <main+0x262>
 3a6:	53 cf       	rjmp	.-346    	; 0x24e <main+0x108>
 3a8:	76 2c       	mov	r7, r6
						ChSel = 1;
						//sprintf(String,"Character sel started\n");
						//UART_SendData(String);
					}
				}
				if((400 < adc_read) && (adc_read < 600))
 3aa:	fd ce       	rjmp	.-518    	; 0x1a6 <main+0x60>

000003ac <__vector_21>:
 3ac:	1f 92       	push	r1
	//Enable output compare interrupt for output compare B
	TIMSK1 |= (1<< OCIE1B);
}

ISR(ADC_vect)
{
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	2f 93       	push	r18
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
	adc_read = (unsigned char)ADCL;
 3bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	adc_read |= ((ADCH & 0x03)<<8);
 3ca:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 3ce:	23 70       	andi	r18, 0x03	; 3
 3d0:	92 2b       	or	r25, r18
 3d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	//sprintf(String,"ADC read triggered = %d\n",adc_read);
	//UART_SendData(String);
}
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_18>:



ISR(USART_RX_vect)
{
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	8f 93       	push	r24
 3f6:	ef 93       	push	r30
 3f8:	ff 93       	push	r31
	rcv = UDR0;
 3fa:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 3fe:	e0 93 7e 02 	sts	0x027E, r30	; 0x80027e <rcv>
	PORTD = char_lookup_read[rcv-' '];
 402:	0e 2e       	mov	r0, r30
 404:	00 0c       	add	r0, r0
 406:	ff 0b       	sbc	r31, r31
 408:	ef 54       	subi	r30, 0x4F	; 79
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	80 81       	ld	r24, Z
 40e:	8b b9       	out	0x0b, r24	; 11
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	8f 91       	pop	r24
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 420:	1f 92       	push	r1
 422:	0f 92       	push	r0
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	0f 92       	push	r0
 428:	11 24       	eor	r1, r1
 42a:	2f 93       	push	r18
 42c:	3f 93       	push	r19
 42e:	4f 93       	push	r20
 430:	5f 93       	push	r21
 432:	6f 93       	push	r22
 434:	7f 93       	push	r23
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
 43a:	af 93       	push	r26
 43c:	bf 93       	push	r27
 43e:	ef 93       	push	r30
 440:	ff 93       	push	r31
	UART_send('n');
 442:	8e e6       	ldi	r24, 0x6E	; 110
 444:	ed d0       	rcall	.+474    	; 0x620 <UART_send>
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	80 e7       	ldi	r24, 0x70	; 112
 44a:	92 e0       	ldi	r25, 0x02	; 2
 44c:	21 50       	subi	r18, 0x01	; 1
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <__vector_10+0x2c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__vector_10+0x36>
 456:	00 00       	nop
	_delay_ms(50);
}
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__vector_12>:


ISR(TIMER1_COMPB_vect)
{
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
	
}
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__vector_3>:

ISR(PCINT0_vect)
{
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	4f 93       	push	r20
 49e:	5f 93       	push	r21
 4a0:	6f 93       	push	r22
 4a2:	7f 93       	push	r23
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
 4ac:	ef 93       	push	r30
 4ae:	ff 93       	push	r31
	PCMSK0 &= ~(1<<PCINT2);
 4b0:	eb e6       	ldi	r30, 0x6B	; 107
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	8b 7f       	andi	r24, 0xFB	; 251
 4b8:	80 83       	st	Z, r24
	//sprintf(String,"Mode Change request =\r\n");
	//UART_putstring(String);
	if(!( PINB & (1<<PB2)))
 4ba:	1a 99       	sbic	0x03, 2	; 3
 4bc:	1f c0       	rjmp	.+62     	; 0x4fc <__vector_3+0x6e>
	{		
		if(eModeEx == Run)
 4be:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	d9 f4       	brne	.+54     	; 0x4fc <__vector_3+0x6e>
		{
			eModeSel ^= 1;
 4c6:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <eModeSel>
 4ca:	89 27       	eor	r24, r25
 4cc:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <eModeSel>
			eModeEx = Init;
 4d0:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <__data_end>
			sprintf(String,"Mode Change= %d\r\n",eModeSel);
 4d4:	1f 92       	push	r1
 4d6:	8f 93       	push	r24
 4d8:	80 e6       	ldi	r24, 0x60	; 96
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	9f 93       	push	r25
 4de:	8f 93       	push	r24
 4e0:	8f e7       	ldi	r24, 0x7F	; 127
 4e2:	92 e0       	ldi	r25, 0x02	; 2
 4e4:	9f 93       	push	r25
 4e6:	8f 93       	push	r24
 4e8:	b1 d0       	rcall	.+354    	; 0x64c <sprintf>
			UART_putstring(String);
 4ea:	8f e7       	ldi	r24, 0x7F	; 127
 4ec:	92 e0       	ldi	r25, 0x02	; 2
 4ee:	a0 d0       	rcall	.+320    	; 0x630 <UART_putstring>
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	83 ed       	ldi	r24, 0xD3	; 211
 500:	90 e3       	ldi	r25, 0x30	; 48
 502:	21 50       	subi	r18, 0x01	; 1
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <__vector_3+0x74>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <__vector_3+0x7e>
 50c:	00 00       	nop
		}
	}
	 _delay_ms(1000);       
	 PCMSK0 |= (1<<PCINT2);                                                                                                                                                                            
 50e:	eb e6       	ldi	r30, 0x6B	; 107
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	84 60       	ori	r24, 0x04	; 4
 516:	80 83       	st	Z, r24
}
 518:	ff 91       	pop	r31
 51a:	ef 91       	pop	r30
 51c:	bf 91       	pop	r27
 51e:	af 91       	pop	r26
 520:	9f 91       	pop	r25
 522:	8f 91       	pop	r24
 524:	7f 91       	pop	r23
 526:	6f 91       	pop	r22
 528:	5f 91       	pop	r21
 52a:	4f 91       	pop	r20
 52c:	3f 91       	pop	r19
 52e:	2f 91       	pop	r18
 530:	0f 90       	pop	r0
 532:	0f be       	out	0x3f, r0	; 63
 534:	0f 90       	pop	r0
 536:	1f 90       	pop	r1
 538:	18 95       	reti

0000053a <calculateCheckSum>:
  *array = (uint8_t)(value>>8);
  *(array+1) = (uint8_t)(value);
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
 53a:	fc 01       	movw	r30, r24
 53c:	31 96       	adiw	r30, 0x01	; 1
 53e:	ac 01       	movw	r20, r24
 540:	49 5f       	subi	r20, 0xF9	; 249
 542:	5f 4f       	sbci	r21, 0xFF	; 255
  uint16_t sum = 0;
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	30 e0       	ldi	r19, 0x00	; 0
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
    sum += buffer[i];
 548:	91 91       	ld	r25, Z+
 54a:	29 0f       	add	r18, r25
 54c:	31 1d       	adc	r19, r1
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
  uint16_t sum = 0;
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
 54e:	e4 17       	cp	r30, r20
 550:	f5 07       	cpc	r31, r21
 552:	d1 f7       	brne	.-12     	; 0x548 <calculateCheckSum+0xe>
    sum += buffer[i];
  }
  return -sum;
}
 554:	88 27       	eor	r24, r24
 556:	99 27       	eor	r25, r25
 558:	82 1b       	sub	r24, r18
 55a:	93 0b       	sbc	r25, r19
 55c:	08 95       	ret

0000055e <sendPacket>:

char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
    _packet[PKT_CMD] = cmd;
 566:	c2 e0       	ldi	r28, 0x02	; 2
 568:	d1 e0       	ldi	r29, 0x01	; 1
 56a:	8b 83       	std	Y+3, r24	; 0x03

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 56c:	7d 83       	std	Y+5, r23	; 0x05
  *(array+1) = (uint8_t)(value);
 56e:	6e 83       	std	Y+6, r22	; 0x06
char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
 570:	ce 01       	movw	r24, r28
 572:	e3 df       	rcall	.-58     	; 0x53a <calculateCheckSum>

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 574:	9f 83       	std	Y+7, r25	; 0x07
  *(array+1) = (uint8_t)(value);
 576:	88 87       	std	Y+8, r24	; 0x08
 578:	0c e0       	ldi	r16, 0x0C	; 12
 57a:	11 e0       	ldi	r17, 0x01	; 1
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
        UART_send(_packet[i]);
 57c:	89 91       	ld	r24, Y+
 57e:	50 d0       	rcall	.+160    	; 0x620 <UART_send>
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
 580:	c0 17       	cp	r28, r16
 582:	d1 07       	cpc	r29, r17
 584:	d9 f7       	brne	.-10     	; 0x57c <sendPacket+0x1e>
 586:	83 ec       	ldi	r24, 0xC3	; 195
 588:	99 e0       	ldi	r25, 0x09	; 9
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <sendPacket+0x2c>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <sendPacket+0x32>
 590:	00 00       	nop
        UART_send(_packet[i]);
    }
    _delay_ms(10);
}
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <speaker_reset>:

void speaker_reset()
{
    sendPacket((uint8_t)0x0C, (uint8_t)0);
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	8c e0       	ldi	r24, 0x0C	; 12
 5a2:	dd cf       	rjmp	.-70     	; 0x55e <sendPacket>
 5a4:	08 95       	ret

000005a6 <speaker_setVolume>:
}

void speaker_setVolume(uint8_t vol)
{
    sendPacket((uint8_t)0x06, (uint8_t)vol);
 5a6:	68 2f       	mov	r22, r24
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	86 e0       	ldi	r24, 0x06	; 6
 5ac:	d8 cf       	rjmp	.-80     	; 0x55e <sendPacket>
 5ae:	08 95       	ret

000005b0 <speaker_setEQ>:
}

void speaker_setEQ()
{
    sendPacket((uint8_t)0x07, (uint8_t)0);
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	87 e0       	ldi	r24, 0x07	; 7
 5b6:	d3 cf       	rjmp	.-90     	; 0x55e <sendPacket>
 5b8:	08 95       	ret

000005ba <speaker_outputDevice>:
}

void speaker_outputDevice()
{
    sendPacket((uint8_t)0x09, (uint8_t)DFPLAYER_DEVICE_SD);
 5ba:	62 e0       	ldi	r22, 0x02	; 2
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	89 e0       	ldi	r24, 0x09	; 9
 5c0:	ce df       	rcall	.-100    	; 0x55e <sendPacket>
 5c2:	8f e4       	ldi	r24, 0x4F	; 79
 5c4:	93 ec       	ldi	r25, 0xC3	; 195
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	f1 f7       	brne	.-4      	; 0x5c6 <speaker_outputDevice+0xc>
 5ca:	00 c0       	rjmp	.+0      	; 0x5cc <speaker_outputDevice+0x12>
 5cc:	00 00       	nop
 5ce:	08 95       	ret

000005d0 <speaker_play>:
    _delay_ms(200);
}

void speaker_play(uint8_t file)
{
    sendPacket((uint8_t)0x03, file);
 5d0:	68 2f       	mov	r22, r24
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	83 e0       	ldi	r24, 0x03	; 3
 5d6:	c3 cf       	rjmp	.-122    	; 0x55e <sendPacket>
 5d8:	08 95       	ret

000005da <speaker_begin>:
}

void speaker_begin()
{
    speaker_reset();
 5da:	e0 df       	rcall	.-64     	; 0x59c <speaker_reset>
 5dc:	2f e7       	ldi	r18, 0x7F	; 127
 5de:	8a e1       	ldi	r24, 0x1A	; 26
 5e0:	96 e0       	ldi	r25, 0x06	; 6
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <speaker_begin+0x8>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <speaker_begin+0x12>
 5ec:	00 00       	nop
    _delay_ms(2000);

    speaker_setVolume(20);
 5ee:	84 e1       	ldi	r24, 0x14	; 20
    speaker_setEQ();
 5f0:	da df       	rcall	.-76     	; 0x5a6 <speaker_setVolume>
 5f2:	de df       	rcall	.-68     	; 0x5b0 <speaker_setEQ>
    speaker_outputDevice();
 5f4:	e2 cf       	rjmp	.-60     	; 0x5ba <speaker_outputDevice>
 5f6:	08 95       	ret

000005f8 <UART_init>:
 5f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
void UART_init()
{
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
	UBRR0L = (unsigned char)BAUD_PRESCALER;
 5fc:	87 e6       	ldi	r24, 0x67	; 103
 5fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 602:	e1 ec       	ldi	r30, 0xC1	; 193
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	88 e1       	ldi	r24, 0x18	; 24
 608:	80 83       	st	Z, r24
	/* Set frame format: 2 stop bits, 8 data bits */
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
 60a:	a2 ec       	ldi	r26, 0xC2	; 194
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	86 e0       	ldi	r24, 0x06	; 6
 610:	8c 93       	st	X, r24
	UCSR0C |= (1<<USBS0); // 2 stop bits
 612:	8c 91       	ld	r24, X
 614:	88 60       	ori	r24, 0x08	; 8
 616:	8c 93       	st	X, r24
	
	UCSR0B |= (1<<RXCIE0);
 618:	80 81       	ld	r24, Z
 61a:	80 68       	ori	r24, 0x80	; 128
 61c:	80 83       	st	Z, r24
 61e:	08 95       	ret

00000620 <UART_send>:
}

void UART_send(unsigned char data)
{
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 620:	e0 ec       	ldi	r30, 0xC0	; 192
 622:	f0 e0       	ldi	r31, 0x00	; 0
 624:	90 81       	ld	r25, Z
 626:	95 ff       	sbrs	r25, 5
 628:	fd cf       	rjmp	.-6      	; 0x624 <UART_send+0x4>
	// Put data into buffer and send data
	UDR0 = data;
 62a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 62e:	08 95       	ret

00000630 <UART_putstring>:
	
}

void UART_putstring(char* StringPtr)
{
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
 636:	88 81       	ld	r24, Y
 638:	88 23       	and	r24, r24
 63a:	29 f0       	breq	.+10     	; 0x646 <UART_putstring+0x16>
 63c:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_send(*StringPtr);
 63e:	f0 df       	rcall	.-32     	; 0x620 <UART_send>
	
}

void UART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00)
 640:	89 91       	ld	r24, Y+
 642:	81 11       	cpse	r24, r1
 644:	fc cf       	rjmp	.-8      	; 0x63e <UART_putstring+0xe>
	{
		UART_send(*StringPtr);
		StringPtr++;
	}
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <sprintf>:
 64c:	ae e0       	ldi	r26, 0x0E	; 14
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	eb e2       	ldi	r30, 0x2B	; 43
 652:	f3 e0       	ldi	r31, 0x03	; 3
 654:	aa c2       	rjmp	.+1364   	; 0xbaa <__prologue_saves__+0x1c>
 656:	0d 89       	ldd	r16, Y+21	; 0x15
 658:	1e 89       	ldd	r17, Y+22	; 0x16
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	8c 83       	std	Y+4, r24	; 0x04
 65e:	1a 83       	std	Y+2, r17	; 0x02
 660:	09 83       	std	Y+1, r16	; 0x01
 662:	8f ef       	ldi	r24, 0xFF	; 255
 664:	9f e7       	ldi	r25, 0x7F	; 127
 666:	9e 83       	std	Y+6, r25	; 0x06
 668:	8d 83       	std	Y+5, r24	; 0x05
 66a:	ae 01       	movw	r20, r28
 66c:	47 5e       	subi	r20, 0xE7	; 231
 66e:	5f 4f       	sbci	r21, 0xFF	; 255
 670:	6f 89       	ldd	r22, Y+23	; 0x17
 672:	78 8d       	ldd	r23, Y+24	; 0x18
 674:	ce 01       	movw	r24, r28
 676:	01 96       	adiw	r24, 0x01	; 1
 678:	08 d0       	rcall	.+16     	; 0x68a <vfprintf>
 67a:	ef 81       	ldd	r30, Y+7	; 0x07
 67c:	f8 85       	ldd	r31, Y+8	; 0x08
 67e:	e0 0f       	add	r30, r16
 680:	f1 1f       	adc	r31, r17
 682:	10 82       	st	Z, r1
 684:	2e 96       	adiw	r28, 0x0e	; 14
 686:	e4 e0       	ldi	r30, 0x04	; 4
 688:	ac c2       	rjmp	.+1368   	; 0xbe2 <__epilogue_restores__+0x1c>

0000068a <vfprintf>:
 68a:	ab e0       	ldi	r26, 0x0B	; 11
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	ea e4       	ldi	r30, 0x4A	; 74
 690:	f3 e0       	ldi	r31, 0x03	; 3
 692:	7d c2       	rjmp	.+1274   	; 0xb8e <__prologue_saves__>
 694:	6c 01       	movw	r12, r24
 696:	7b 01       	movw	r14, r22
 698:	8a 01       	movw	r16, r20
 69a:	fc 01       	movw	r30, r24
 69c:	17 82       	std	Z+7, r1	; 0x07
 69e:	16 82       	std	Z+6, r1	; 0x06
 6a0:	83 81       	ldd	r24, Z+3	; 0x03
 6a2:	81 ff       	sbrs	r24, 1
 6a4:	bf c1       	rjmp	.+894    	; 0xa24 <__stack+0x125>
 6a6:	ce 01       	movw	r24, r28
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	3c 01       	movw	r6, r24
 6ac:	f6 01       	movw	r30, r12
 6ae:	93 81       	ldd	r25, Z+3	; 0x03
 6b0:	f7 01       	movw	r30, r14
 6b2:	93 fd       	sbrc	r25, 3
 6b4:	85 91       	lpm	r24, Z+
 6b6:	93 ff       	sbrs	r25, 3
 6b8:	81 91       	ld	r24, Z+
 6ba:	7f 01       	movw	r14, r30
 6bc:	88 23       	and	r24, r24
 6be:	09 f4       	brne	.+2      	; 0x6c2 <vfprintf+0x38>
 6c0:	ad c1       	rjmp	.+858    	; 0xa1c <__stack+0x11d>
 6c2:	85 32       	cpi	r24, 0x25	; 37
 6c4:	39 f4       	brne	.+14     	; 0x6d4 <vfprintf+0x4a>
 6c6:	93 fd       	sbrc	r25, 3
 6c8:	85 91       	lpm	r24, Z+
 6ca:	93 ff       	sbrs	r25, 3
 6cc:	81 91       	ld	r24, Z+
 6ce:	7f 01       	movw	r14, r30
 6d0:	85 32       	cpi	r24, 0x25	; 37
 6d2:	21 f4       	brne	.+8      	; 0x6dc <vfprintf+0x52>
 6d4:	b6 01       	movw	r22, r12
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	c0 d1       	rcall	.+896    	; 0xa5a <fputc>
 6da:	e8 cf       	rjmp	.-48     	; 0x6ac <vfprintf+0x22>
 6dc:	91 2c       	mov	r9, r1
 6de:	21 2c       	mov	r2, r1
 6e0:	31 2c       	mov	r3, r1
 6e2:	ff e1       	ldi	r31, 0x1F	; 31
 6e4:	f3 15       	cp	r31, r3
 6e6:	d8 f0       	brcs	.+54     	; 0x71e <vfprintf+0x94>
 6e8:	8b 32       	cpi	r24, 0x2B	; 43
 6ea:	79 f0       	breq	.+30     	; 0x70a <vfprintf+0x80>
 6ec:	38 f4       	brcc	.+14     	; 0x6fc <vfprintf+0x72>
 6ee:	80 32       	cpi	r24, 0x20	; 32
 6f0:	79 f0       	breq	.+30     	; 0x710 <vfprintf+0x86>
 6f2:	83 32       	cpi	r24, 0x23	; 35
 6f4:	a1 f4       	brne	.+40     	; 0x71e <vfprintf+0x94>
 6f6:	23 2d       	mov	r18, r3
 6f8:	20 61       	ori	r18, 0x10	; 16
 6fa:	1d c0       	rjmp	.+58     	; 0x736 <vfprintf+0xac>
 6fc:	8d 32       	cpi	r24, 0x2D	; 45
 6fe:	61 f0       	breq	.+24     	; 0x718 <vfprintf+0x8e>
 700:	80 33       	cpi	r24, 0x30	; 48
 702:	69 f4       	brne	.+26     	; 0x71e <vfprintf+0x94>
 704:	23 2d       	mov	r18, r3
 706:	21 60       	ori	r18, 0x01	; 1
 708:	16 c0       	rjmp	.+44     	; 0x736 <vfprintf+0xac>
 70a:	83 2d       	mov	r24, r3
 70c:	82 60       	ori	r24, 0x02	; 2
 70e:	38 2e       	mov	r3, r24
 710:	e3 2d       	mov	r30, r3
 712:	e4 60       	ori	r30, 0x04	; 4
 714:	3e 2e       	mov	r3, r30
 716:	2a c0       	rjmp	.+84     	; 0x76c <vfprintf+0xe2>
 718:	f3 2d       	mov	r31, r3
 71a:	f8 60       	ori	r31, 0x08	; 8
 71c:	1d c0       	rjmp	.+58     	; 0x758 <vfprintf+0xce>
 71e:	37 fc       	sbrc	r3, 7
 720:	2d c0       	rjmp	.+90     	; 0x77c <vfprintf+0xf2>
 722:	20 ed       	ldi	r18, 0xD0	; 208
 724:	28 0f       	add	r18, r24
 726:	2a 30       	cpi	r18, 0x0A	; 10
 728:	40 f0       	brcs	.+16     	; 0x73a <vfprintf+0xb0>
 72a:	8e 32       	cpi	r24, 0x2E	; 46
 72c:	b9 f4       	brne	.+46     	; 0x75c <vfprintf+0xd2>
 72e:	36 fc       	sbrc	r3, 6
 730:	75 c1       	rjmp	.+746    	; 0xa1c <__stack+0x11d>
 732:	23 2d       	mov	r18, r3
 734:	20 64       	ori	r18, 0x40	; 64
 736:	32 2e       	mov	r3, r18
 738:	19 c0       	rjmp	.+50     	; 0x76c <vfprintf+0xe2>
 73a:	36 fe       	sbrs	r3, 6
 73c:	06 c0       	rjmp	.+12     	; 0x74a <vfprintf+0xc0>
 73e:	8a e0       	ldi	r24, 0x0A	; 10
 740:	98 9e       	mul	r9, r24
 742:	20 0d       	add	r18, r0
 744:	11 24       	eor	r1, r1
 746:	92 2e       	mov	r9, r18
 748:	11 c0       	rjmp	.+34     	; 0x76c <vfprintf+0xe2>
 74a:	ea e0       	ldi	r30, 0x0A	; 10
 74c:	2e 9e       	mul	r2, r30
 74e:	20 0d       	add	r18, r0
 750:	11 24       	eor	r1, r1
 752:	22 2e       	mov	r2, r18
 754:	f3 2d       	mov	r31, r3
 756:	f0 62       	ori	r31, 0x20	; 32
 758:	3f 2e       	mov	r3, r31
 75a:	08 c0       	rjmp	.+16     	; 0x76c <vfprintf+0xe2>
 75c:	8c 36       	cpi	r24, 0x6C	; 108
 75e:	21 f4       	brne	.+8      	; 0x768 <vfprintf+0xde>
 760:	83 2d       	mov	r24, r3
 762:	80 68       	ori	r24, 0x80	; 128
 764:	38 2e       	mov	r3, r24
 766:	02 c0       	rjmp	.+4      	; 0x76c <vfprintf+0xe2>
 768:	88 36       	cpi	r24, 0x68	; 104
 76a:	41 f4       	brne	.+16     	; 0x77c <vfprintf+0xf2>
 76c:	f7 01       	movw	r30, r14
 76e:	93 fd       	sbrc	r25, 3
 770:	85 91       	lpm	r24, Z+
 772:	93 ff       	sbrs	r25, 3
 774:	81 91       	ld	r24, Z+
 776:	7f 01       	movw	r14, r30
 778:	81 11       	cpse	r24, r1
 77a:	b3 cf       	rjmp	.-154    	; 0x6e2 <vfprintf+0x58>
 77c:	98 2f       	mov	r25, r24
 77e:	9f 7d       	andi	r25, 0xDF	; 223
 780:	95 54       	subi	r25, 0x45	; 69
 782:	93 30       	cpi	r25, 0x03	; 3
 784:	28 f4       	brcc	.+10     	; 0x790 <vfprintf+0x106>
 786:	0c 5f       	subi	r16, 0xFC	; 252
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	9f e3       	ldi	r25, 0x3F	; 63
 78c:	99 83       	std	Y+1, r25	; 0x01
 78e:	0d c0       	rjmp	.+26     	; 0x7aa <vfprintf+0x120>
 790:	83 36       	cpi	r24, 0x63	; 99
 792:	31 f0       	breq	.+12     	; 0x7a0 <vfprintf+0x116>
 794:	83 37       	cpi	r24, 0x73	; 115
 796:	71 f0       	breq	.+28     	; 0x7b4 <vfprintf+0x12a>
 798:	83 35       	cpi	r24, 0x53	; 83
 79a:	09 f0       	breq	.+2      	; 0x79e <vfprintf+0x114>
 79c:	55 c0       	rjmp	.+170    	; 0x848 <vfprintf+0x1be>
 79e:	20 c0       	rjmp	.+64     	; 0x7e0 <vfprintf+0x156>
 7a0:	f8 01       	movw	r30, r16
 7a2:	80 81       	ld	r24, Z
 7a4:	89 83       	std	Y+1, r24	; 0x01
 7a6:	0e 5f       	subi	r16, 0xFE	; 254
 7a8:	1f 4f       	sbci	r17, 0xFF	; 255
 7aa:	88 24       	eor	r8, r8
 7ac:	83 94       	inc	r8
 7ae:	91 2c       	mov	r9, r1
 7b0:	53 01       	movw	r10, r6
 7b2:	12 c0       	rjmp	.+36     	; 0x7d8 <vfprintf+0x14e>
 7b4:	28 01       	movw	r4, r16
 7b6:	f2 e0       	ldi	r31, 0x02	; 2
 7b8:	4f 0e       	add	r4, r31
 7ba:	51 1c       	adc	r5, r1
 7bc:	f8 01       	movw	r30, r16
 7be:	a0 80       	ld	r10, Z
 7c0:	b1 80       	ldd	r11, Z+1	; 0x01
 7c2:	36 fe       	sbrs	r3, 6
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <vfprintf+0x142>
 7c6:	69 2d       	mov	r22, r9
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0x146>
 7cc:	6f ef       	ldi	r22, 0xFF	; 255
 7ce:	7f ef       	ldi	r23, 0xFF	; 255
 7d0:	c5 01       	movw	r24, r10
 7d2:	38 d1       	rcall	.+624    	; 0xa44 <strnlen>
 7d4:	4c 01       	movw	r8, r24
 7d6:	82 01       	movw	r16, r4
 7d8:	f3 2d       	mov	r31, r3
 7da:	ff 77       	andi	r31, 0x7F	; 127
 7dc:	3f 2e       	mov	r3, r31
 7de:	15 c0       	rjmp	.+42     	; 0x80a <vfprintf+0x180>
 7e0:	28 01       	movw	r4, r16
 7e2:	22 e0       	ldi	r18, 0x02	; 2
 7e4:	42 0e       	add	r4, r18
 7e6:	51 1c       	adc	r5, r1
 7e8:	f8 01       	movw	r30, r16
 7ea:	a0 80       	ld	r10, Z
 7ec:	b1 80       	ldd	r11, Z+1	; 0x01
 7ee:	36 fe       	sbrs	r3, 6
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <vfprintf+0x16e>
 7f2:	69 2d       	mov	r22, r9
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x172>
 7f8:	6f ef       	ldi	r22, 0xFF	; 255
 7fa:	7f ef       	ldi	r23, 0xFF	; 255
 7fc:	c5 01       	movw	r24, r10
 7fe:	17 d1       	rcall	.+558    	; 0xa2e <strnlen_P>
 800:	4c 01       	movw	r8, r24
 802:	f3 2d       	mov	r31, r3
 804:	f0 68       	ori	r31, 0x80	; 128
 806:	3f 2e       	mov	r3, r31
 808:	82 01       	movw	r16, r4
 80a:	33 fc       	sbrc	r3, 3
 80c:	19 c0       	rjmp	.+50     	; 0x840 <vfprintf+0x1b6>
 80e:	82 2d       	mov	r24, r2
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	88 16       	cp	r8, r24
 814:	99 06       	cpc	r9, r25
 816:	a0 f4       	brcc	.+40     	; 0x840 <vfprintf+0x1b6>
 818:	b6 01       	movw	r22, r12
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	1d d1       	rcall	.+570    	; 0xa5a <fputc>
 820:	2a 94       	dec	r2
 822:	f5 cf       	rjmp	.-22     	; 0x80e <vfprintf+0x184>
 824:	f5 01       	movw	r30, r10
 826:	37 fc       	sbrc	r3, 7
 828:	85 91       	lpm	r24, Z+
 82a:	37 fe       	sbrs	r3, 7
 82c:	81 91       	ld	r24, Z+
 82e:	5f 01       	movw	r10, r30
 830:	b6 01       	movw	r22, r12
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	12 d1       	rcall	.+548    	; 0xa5a <fputc>
 836:	21 10       	cpse	r2, r1
 838:	2a 94       	dec	r2
 83a:	21 e0       	ldi	r18, 0x01	; 1
 83c:	82 1a       	sub	r8, r18
 83e:	91 08       	sbc	r9, r1
 840:	81 14       	cp	r8, r1
 842:	91 04       	cpc	r9, r1
 844:	79 f7       	brne	.-34     	; 0x824 <vfprintf+0x19a>
 846:	e1 c0       	rjmp	.+450    	; 0xa0a <__stack+0x10b>
 848:	84 36       	cpi	r24, 0x64	; 100
 84a:	11 f0       	breq	.+4      	; 0x850 <vfprintf+0x1c6>
 84c:	89 36       	cpi	r24, 0x69	; 105
 84e:	39 f5       	brne	.+78     	; 0x89e <vfprintf+0x214>
 850:	f8 01       	movw	r30, r16
 852:	37 fe       	sbrs	r3, 7
 854:	07 c0       	rjmp	.+14     	; 0x864 <vfprintf+0x1da>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	82 81       	ldd	r24, Z+2	; 0x02
 85c:	93 81       	ldd	r25, Z+3	; 0x03
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	08 c0       	rjmp	.+16     	; 0x874 <vfprintf+0x1ea>
 864:	60 81       	ld	r22, Z
 866:	71 81       	ldd	r23, Z+1	; 0x01
 868:	07 2e       	mov	r0, r23
 86a:	00 0c       	add	r0, r0
 86c:	88 0b       	sbc	r24, r24
 86e:	99 0b       	sbc	r25, r25
 870:	0e 5f       	subi	r16, 0xFE	; 254
 872:	1f 4f       	sbci	r17, 0xFF	; 255
 874:	f3 2d       	mov	r31, r3
 876:	ff 76       	andi	r31, 0x6F	; 111
 878:	3f 2e       	mov	r3, r31
 87a:	97 ff       	sbrs	r25, 7
 87c:	09 c0       	rjmp	.+18     	; 0x890 <vfprintf+0x206>
 87e:	90 95       	com	r25
 880:	80 95       	com	r24
 882:	70 95       	com	r23
 884:	61 95       	neg	r22
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	f0 68       	ori	r31, 0x80	; 128
 88e:	3f 2e       	mov	r3, r31
 890:	2a e0       	ldi	r18, 0x0A	; 10
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	a3 01       	movw	r20, r6
 896:	1d d1       	rcall	.+570    	; 0xad2 <__ultoa_invert>
 898:	88 2e       	mov	r8, r24
 89a:	86 18       	sub	r8, r6
 89c:	44 c0       	rjmp	.+136    	; 0x926 <__stack+0x27>
 89e:	85 37       	cpi	r24, 0x75	; 117
 8a0:	31 f4       	brne	.+12     	; 0x8ae <vfprintf+0x224>
 8a2:	23 2d       	mov	r18, r3
 8a4:	2f 7e       	andi	r18, 0xEF	; 239
 8a6:	b2 2e       	mov	r11, r18
 8a8:	2a e0       	ldi	r18, 0x0A	; 10
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	25 c0       	rjmp	.+74     	; 0x8f8 <vfprintf+0x26e>
 8ae:	93 2d       	mov	r25, r3
 8b0:	99 7f       	andi	r25, 0xF9	; 249
 8b2:	b9 2e       	mov	r11, r25
 8b4:	8f 36       	cpi	r24, 0x6F	; 111
 8b6:	c1 f0       	breq	.+48     	; 0x8e8 <vfprintf+0x25e>
 8b8:	18 f4       	brcc	.+6      	; 0x8c0 <vfprintf+0x236>
 8ba:	88 35       	cpi	r24, 0x58	; 88
 8bc:	79 f0       	breq	.+30     	; 0x8dc <vfprintf+0x252>
 8be:	ae c0       	rjmp	.+348    	; 0xa1c <__stack+0x11d>
 8c0:	80 37       	cpi	r24, 0x70	; 112
 8c2:	19 f0       	breq	.+6      	; 0x8ca <vfprintf+0x240>
 8c4:	88 37       	cpi	r24, 0x78	; 120
 8c6:	21 f0       	breq	.+8      	; 0x8d0 <vfprintf+0x246>
 8c8:	a9 c0       	rjmp	.+338    	; 0xa1c <__stack+0x11d>
 8ca:	e9 2f       	mov	r30, r25
 8cc:	e0 61       	ori	r30, 0x10	; 16
 8ce:	be 2e       	mov	r11, r30
 8d0:	b4 fe       	sbrs	r11, 4
 8d2:	0d c0       	rjmp	.+26     	; 0x8ee <vfprintf+0x264>
 8d4:	fb 2d       	mov	r31, r11
 8d6:	f4 60       	ori	r31, 0x04	; 4
 8d8:	bf 2e       	mov	r11, r31
 8da:	09 c0       	rjmp	.+18     	; 0x8ee <vfprintf+0x264>
 8dc:	34 fe       	sbrs	r3, 4
 8de:	0a c0       	rjmp	.+20     	; 0x8f4 <vfprintf+0x26a>
 8e0:	29 2f       	mov	r18, r25
 8e2:	26 60       	ori	r18, 0x06	; 6
 8e4:	b2 2e       	mov	r11, r18
 8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <vfprintf+0x26a>
 8e8:	28 e0       	ldi	r18, 0x08	; 8
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <vfprintf+0x26e>
 8ee:	20 e1       	ldi	r18, 0x10	; 16
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <vfprintf+0x26e>
 8f4:	20 e1       	ldi	r18, 0x10	; 16
 8f6:	32 e0       	ldi	r19, 0x02	; 2
 8f8:	f8 01       	movw	r30, r16
 8fa:	b7 fe       	sbrs	r11, 7
 8fc:	07 c0       	rjmp	.+14     	; 0x90c <__stack+0xd>
 8fe:	60 81       	ld	r22, Z
 900:	71 81       	ldd	r23, Z+1	; 0x01
 902:	82 81       	ldd	r24, Z+2	; 0x02
 904:	93 81       	ldd	r25, Z+3	; 0x03
 906:	0c 5f       	subi	r16, 0xFC	; 252
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	06 c0       	rjmp	.+12     	; 0x918 <__stack+0x19>
 90c:	60 81       	ld	r22, Z
 90e:	71 81       	ldd	r23, Z+1	; 0x01
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 5f       	subi	r16, 0xFE	; 254
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	a3 01       	movw	r20, r6
 91a:	db d0       	rcall	.+438    	; 0xad2 <__ultoa_invert>
 91c:	88 2e       	mov	r8, r24
 91e:	86 18       	sub	r8, r6
 920:	fb 2d       	mov	r31, r11
 922:	ff 77       	andi	r31, 0x7F	; 127
 924:	3f 2e       	mov	r3, r31
 926:	36 fe       	sbrs	r3, 6
 928:	0d c0       	rjmp	.+26     	; 0x944 <__stack+0x45>
 92a:	23 2d       	mov	r18, r3
 92c:	2e 7f       	andi	r18, 0xFE	; 254
 92e:	a2 2e       	mov	r10, r18
 930:	89 14       	cp	r8, r9
 932:	58 f4       	brcc	.+22     	; 0x94a <__stack+0x4b>
 934:	34 fe       	sbrs	r3, 4
 936:	0b c0       	rjmp	.+22     	; 0x94e <__stack+0x4f>
 938:	32 fc       	sbrc	r3, 2
 93a:	09 c0       	rjmp	.+18     	; 0x94e <__stack+0x4f>
 93c:	83 2d       	mov	r24, r3
 93e:	8e 7e       	andi	r24, 0xEE	; 238
 940:	a8 2e       	mov	r10, r24
 942:	05 c0       	rjmp	.+10     	; 0x94e <__stack+0x4f>
 944:	b8 2c       	mov	r11, r8
 946:	a3 2c       	mov	r10, r3
 948:	03 c0       	rjmp	.+6      	; 0x950 <__stack+0x51>
 94a:	b8 2c       	mov	r11, r8
 94c:	01 c0       	rjmp	.+2      	; 0x950 <__stack+0x51>
 94e:	b9 2c       	mov	r11, r9
 950:	a4 fe       	sbrs	r10, 4
 952:	0f c0       	rjmp	.+30     	; 0x972 <__stack+0x73>
 954:	fe 01       	movw	r30, r28
 956:	e8 0d       	add	r30, r8
 958:	f1 1d       	adc	r31, r1
 95a:	80 81       	ld	r24, Z
 95c:	80 33       	cpi	r24, 0x30	; 48
 95e:	21 f4       	brne	.+8      	; 0x968 <__stack+0x69>
 960:	9a 2d       	mov	r25, r10
 962:	99 7e       	andi	r25, 0xE9	; 233
 964:	a9 2e       	mov	r10, r25
 966:	09 c0       	rjmp	.+18     	; 0x97a <__stack+0x7b>
 968:	a2 fe       	sbrs	r10, 2
 96a:	06 c0       	rjmp	.+12     	; 0x978 <__stack+0x79>
 96c:	b3 94       	inc	r11
 96e:	b3 94       	inc	r11
 970:	04 c0       	rjmp	.+8      	; 0x97a <__stack+0x7b>
 972:	8a 2d       	mov	r24, r10
 974:	86 78       	andi	r24, 0x86	; 134
 976:	09 f0       	breq	.+2      	; 0x97a <__stack+0x7b>
 978:	b3 94       	inc	r11
 97a:	a3 fc       	sbrc	r10, 3
 97c:	10 c0       	rjmp	.+32     	; 0x99e <__stack+0x9f>
 97e:	a0 fe       	sbrs	r10, 0
 980:	06 c0       	rjmp	.+12     	; 0x98e <__stack+0x8f>
 982:	b2 14       	cp	r11, r2
 984:	80 f4       	brcc	.+32     	; 0x9a6 <__stack+0xa7>
 986:	28 0c       	add	r2, r8
 988:	92 2c       	mov	r9, r2
 98a:	9b 18       	sub	r9, r11
 98c:	0d c0       	rjmp	.+26     	; 0x9a8 <__stack+0xa9>
 98e:	b2 14       	cp	r11, r2
 990:	58 f4       	brcc	.+22     	; 0x9a8 <__stack+0xa9>
 992:	b6 01       	movw	r22, r12
 994:	80 e2       	ldi	r24, 0x20	; 32
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	60 d0       	rcall	.+192    	; 0xa5a <fputc>
 99a:	b3 94       	inc	r11
 99c:	f8 cf       	rjmp	.-16     	; 0x98e <__stack+0x8f>
 99e:	b2 14       	cp	r11, r2
 9a0:	18 f4       	brcc	.+6      	; 0x9a8 <__stack+0xa9>
 9a2:	2b 18       	sub	r2, r11
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <__stack+0xab>
 9a6:	98 2c       	mov	r9, r8
 9a8:	21 2c       	mov	r2, r1
 9aa:	a4 fe       	sbrs	r10, 4
 9ac:	0f c0       	rjmp	.+30     	; 0x9cc <__stack+0xcd>
 9ae:	b6 01       	movw	r22, r12
 9b0:	80 e3       	ldi	r24, 0x30	; 48
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	52 d0       	rcall	.+164    	; 0xa5a <fputc>
 9b6:	a2 fe       	sbrs	r10, 2
 9b8:	16 c0       	rjmp	.+44     	; 0x9e6 <__stack+0xe7>
 9ba:	a1 fc       	sbrc	r10, 1
 9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <__stack+0xc5>
 9be:	88 e7       	ldi	r24, 0x78	; 120
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <__stack+0xc9>
 9c4:	88 e5       	ldi	r24, 0x58	; 88
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	b6 01       	movw	r22, r12
 9ca:	0c c0       	rjmp	.+24     	; 0x9e4 <__stack+0xe5>
 9cc:	8a 2d       	mov	r24, r10
 9ce:	86 78       	andi	r24, 0x86	; 134
 9d0:	51 f0       	breq	.+20     	; 0x9e6 <__stack+0xe7>
 9d2:	a1 fe       	sbrs	r10, 1
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <__stack+0xdb>
 9d6:	8b e2       	ldi	r24, 0x2B	; 43
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <__stack+0xdd>
 9da:	80 e2       	ldi	r24, 0x20	; 32
 9dc:	a7 fc       	sbrc	r10, 7
 9de:	8d e2       	ldi	r24, 0x2D	; 45
 9e0:	b6 01       	movw	r22, r12
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	3a d0       	rcall	.+116    	; 0xa5a <fputc>
 9e6:	89 14       	cp	r8, r9
 9e8:	30 f4       	brcc	.+12     	; 0x9f6 <__stack+0xf7>
 9ea:	b6 01       	movw	r22, r12
 9ec:	80 e3       	ldi	r24, 0x30	; 48
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	34 d0       	rcall	.+104    	; 0xa5a <fputc>
 9f2:	9a 94       	dec	r9
 9f4:	f8 cf       	rjmp	.-16     	; 0x9e6 <__stack+0xe7>
 9f6:	8a 94       	dec	r8
 9f8:	f3 01       	movw	r30, r6
 9fa:	e8 0d       	add	r30, r8
 9fc:	f1 1d       	adc	r31, r1
 9fe:	80 81       	ld	r24, Z
 a00:	b6 01       	movw	r22, r12
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	2a d0       	rcall	.+84     	; 0xa5a <fputc>
 a06:	81 10       	cpse	r8, r1
 a08:	f6 cf       	rjmp	.-20     	; 0x9f6 <__stack+0xf7>
 a0a:	22 20       	and	r2, r2
 a0c:	09 f4       	brne	.+2      	; 0xa10 <__stack+0x111>
 a0e:	4e ce       	rjmp	.-868    	; 0x6ac <vfprintf+0x22>
 a10:	b6 01       	movw	r22, r12
 a12:	80 e2       	ldi	r24, 0x20	; 32
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	21 d0       	rcall	.+66     	; 0xa5a <fputc>
 a18:	2a 94       	dec	r2
 a1a:	f7 cf       	rjmp	.-18     	; 0xa0a <__stack+0x10b>
 a1c:	f6 01       	movw	r30, r12
 a1e:	86 81       	ldd	r24, Z+6	; 0x06
 a20:	97 81       	ldd	r25, Z+7	; 0x07
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <__stack+0x129>
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	9f ef       	ldi	r25, 0xFF	; 255
 a28:	2b 96       	adiw	r28, 0x0b	; 11
 a2a:	e2 e1       	ldi	r30, 0x12	; 18
 a2c:	cc c0       	rjmp	.+408    	; 0xbc6 <__epilogue_restores__>

00000a2e <strnlen_P>:
 a2e:	fc 01       	movw	r30, r24
 a30:	05 90       	lpm	r0, Z+
 a32:	61 50       	subi	r22, 0x01	; 1
 a34:	70 40       	sbci	r23, 0x00	; 0
 a36:	01 10       	cpse	r0, r1
 a38:	d8 f7       	brcc	.-10     	; 0xa30 <strnlen_P+0x2>
 a3a:	80 95       	com	r24
 a3c:	90 95       	com	r25
 a3e:	8e 0f       	add	r24, r30
 a40:	9f 1f       	adc	r25, r31
 a42:	08 95       	ret

00000a44 <strnlen>:
 a44:	fc 01       	movw	r30, r24
 a46:	61 50       	subi	r22, 0x01	; 1
 a48:	70 40       	sbci	r23, 0x00	; 0
 a4a:	01 90       	ld	r0, Z+
 a4c:	01 10       	cpse	r0, r1
 a4e:	d8 f7       	brcc	.-10     	; 0xa46 <strnlen+0x2>
 a50:	80 95       	com	r24
 a52:	90 95       	com	r25
 a54:	8e 0f       	add	r24, r30
 a56:	9f 1f       	adc	r25, r31
 a58:	08 95       	ret

00000a5a <fputc>:
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	fb 01       	movw	r30, r22
 a64:	23 81       	ldd	r18, Z+3	; 0x03
 a66:	21 fd       	sbrc	r18, 1
 a68:	03 c0       	rjmp	.+6      	; 0xa70 <fputc+0x16>
 a6a:	8f ef       	ldi	r24, 0xFF	; 255
 a6c:	9f ef       	ldi	r25, 0xFF	; 255
 a6e:	2c c0       	rjmp	.+88     	; 0xac8 <fputc+0x6e>
 a70:	22 ff       	sbrs	r18, 2
 a72:	16 c0       	rjmp	.+44     	; 0xaa0 <fputc+0x46>
 a74:	46 81       	ldd	r20, Z+6	; 0x06
 a76:	57 81       	ldd	r21, Z+7	; 0x07
 a78:	24 81       	ldd	r18, Z+4	; 0x04
 a7a:	35 81       	ldd	r19, Z+5	; 0x05
 a7c:	42 17       	cp	r20, r18
 a7e:	53 07       	cpc	r21, r19
 a80:	44 f4       	brge	.+16     	; 0xa92 <fputc+0x38>
 a82:	a0 81       	ld	r26, Z
 a84:	b1 81       	ldd	r27, Z+1	; 0x01
 a86:	9d 01       	movw	r18, r26
 a88:	2f 5f       	subi	r18, 0xFF	; 255
 a8a:	3f 4f       	sbci	r19, 0xFF	; 255
 a8c:	31 83       	std	Z+1, r19	; 0x01
 a8e:	20 83       	st	Z, r18
 a90:	8c 93       	st	X, r24
 a92:	26 81       	ldd	r18, Z+6	; 0x06
 a94:	37 81       	ldd	r19, Z+7	; 0x07
 a96:	2f 5f       	subi	r18, 0xFF	; 255
 a98:	3f 4f       	sbci	r19, 0xFF	; 255
 a9a:	37 83       	std	Z+7, r19	; 0x07
 a9c:	26 83       	std	Z+6, r18	; 0x06
 a9e:	14 c0       	rjmp	.+40     	; 0xac8 <fputc+0x6e>
 aa0:	8b 01       	movw	r16, r22
 aa2:	ec 01       	movw	r28, r24
 aa4:	fb 01       	movw	r30, r22
 aa6:	00 84       	ldd	r0, Z+8	; 0x08
 aa8:	f1 85       	ldd	r31, Z+9	; 0x09
 aaa:	e0 2d       	mov	r30, r0
 aac:	09 95       	icall
 aae:	89 2b       	or	r24, r25
 ab0:	e1 f6       	brne	.-72     	; 0xa6a <fputc+0x10>
 ab2:	d8 01       	movw	r26, r16
 ab4:	16 96       	adiw	r26, 0x06	; 6
 ab6:	8d 91       	ld	r24, X+
 ab8:	9c 91       	ld	r25, X
 aba:	17 97       	sbiw	r26, 0x07	; 7
 abc:	01 96       	adiw	r24, 0x01	; 1
 abe:	17 96       	adiw	r26, 0x07	; 7
 ac0:	9c 93       	st	X, r25
 ac2:	8e 93       	st	-X, r24
 ac4:	16 97       	sbiw	r26, 0x06	; 6
 ac6:	ce 01       	movw	r24, r28
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	1f 91       	pop	r17
 ace:	0f 91       	pop	r16
 ad0:	08 95       	ret

00000ad2 <__ultoa_invert>:
 ad2:	fa 01       	movw	r30, r20
 ad4:	aa 27       	eor	r26, r26
 ad6:	28 30       	cpi	r18, 0x08	; 8
 ad8:	51 f1       	breq	.+84     	; 0xb2e <__ultoa_invert+0x5c>
 ada:	20 31       	cpi	r18, 0x10	; 16
 adc:	81 f1       	breq	.+96     	; 0xb3e <__ultoa_invert+0x6c>
 ade:	e8 94       	clt
 ae0:	6f 93       	push	r22
 ae2:	6e 7f       	andi	r22, 0xFE	; 254
 ae4:	6e 5f       	subi	r22, 0xFE	; 254
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	af 4f       	sbci	r26, 0xFF	; 255
 aee:	b1 e0       	ldi	r27, 0x01	; 1
 af0:	3e d0       	rcall	.+124    	; 0xb6e <__ultoa_invert+0x9c>
 af2:	b4 e0       	ldi	r27, 0x04	; 4
 af4:	3c d0       	rcall	.+120    	; 0xb6e <__ultoa_invert+0x9c>
 af6:	67 0f       	add	r22, r23
 af8:	78 1f       	adc	r23, r24
 afa:	89 1f       	adc	r24, r25
 afc:	9a 1f       	adc	r25, r26
 afe:	a1 1d       	adc	r26, r1
 b00:	68 0f       	add	r22, r24
 b02:	79 1f       	adc	r23, r25
 b04:	8a 1f       	adc	r24, r26
 b06:	91 1d       	adc	r25, r1
 b08:	a1 1d       	adc	r26, r1
 b0a:	6a 0f       	add	r22, r26
 b0c:	71 1d       	adc	r23, r1
 b0e:	81 1d       	adc	r24, r1
 b10:	91 1d       	adc	r25, r1
 b12:	a1 1d       	adc	r26, r1
 b14:	20 d0       	rcall	.+64     	; 0xb56 <__ultoa_invert+0x84>
 b16:	09 f4       	brne	.+2      	; 0xb1a <__ultoa_invert+0x48>
 b18:	68 94       	set
 b1a:	3f 91       	pop	r19
 b1c:	2a e0       	ldi	r18, 0x0A	; 10
 b1e:	26 9f       	mul	r18, r22
 b20:	11 24       	eor	r1, r1
 b22:	30 19       	sub	r19, r0
 b24:	30 5d       	subi	r19, 0xD0	; 208
 b26:	31 93       	st	Z+, r19
 b28:	de f6       	brtc	.-74     	; 0xae0 <__ultoa_invert+0xe>
 b2a:	cf 01       	movw	r24, r30
 b2c:	08 95       	ret
 b2e:	46 2f       	mov	r20, r22
 b30:	47 70       	andi	r20, 0x07	; 7
 b32:	40 5d       	subi	r20, 0xD0	; 208
 b34:	41 93       	st	Z+, r20
 b36:	b3 e0       	ldi	r27, 0x03	; 3
 b38:	0f d0       	rcall	.+30     	; 0xb58 <__ultoa_invert+0x86>
 b3a:	c9 f7       	brne	.-14     	; 0xb2e <__ultoa_invert+0x5c>
 b3c:	f6 cf       	rjmp	.-20     	; 0xb2a <__ultoa_invert+0x58>
 b3e:	46 2f       	mov	r20, r22
 b40:	4f 70       	andi	r20, 0x0F	; 15
 b42:	40 5d       	subi	r20, 0xD0	; 208
 b44:	4a 33       	cpi	r20, 0x3A	; 58
 b46:	18 f0       	brcs	.+6      	; 0xb4e <__ultoa_invert+0x7c>
 b48:	49 5d       	subi	r20, 0xD9	; 217
 b4a:	31 fd       	sbrc	r19, 1
 b4c:	40 52       	subi	r20, 0x20	; 32
 b4e:	41 93       	st	Z+, r20
 b50:	02 d0       	rcall	.+4      	; 0xb56 <__ultoa_invert+0x84>
 b52:	a9 f7       	brne	.-22     	; 0xb3e <__ultoa_invert+0x6c>
 b54:	ea cf       	rjmp	.-44     	; 0xb2a <__ultoa_invert+0x58>
 b56:	b4 e0       	ldi	r27, 0x04	; 4
 b58:	a6 95       	lsr	r26
 b5a:	97 95       	ror	r25
 b5c:	87 95       	ror	r24
 b5e:	77 95       	ror	r23
 b60:	67 95       	ror	r22
 b62:	ba 95       	dec	r27
 b64:	c9 f7       	brne	.-14     	; 0xb58 <__ultoa_invert+0x86>
 b66:	00 97       	sbiw	r24, 0x00	; 0
 b68:	61 05       	cpc	r22, r1
 b6a:	71 05       	cpc	r23, r1
 b6c:	08 95       	ret
 b6e:	9b 01       	movw	r18, r22
 b70:	ac 01       	movw	r20, r24
 b72:	0a 2e       	mov	r0, r26
 b74:	06 94       	lsr	r0
 b76:	57 95       	ror	r21
 b78:	47 95       	ror	r20
 b7a:	37 95       	ror	r19
 b7c:	27 95       	ror	r18
 b7e:	ba 95       	dec	r27
 b80:	c9 f7       	brne	.-14     	; 0xb74 <__ultoa_invert+0xa2>
 b82:	62 0f       	add	r22, r18
 b84:	73 1f       	adc	r23, r19
 b86:	84 1f       	adc	r24, r20
 b88:	95 1f       	adc	r25, r21
 b8a:	a0 1d       	adc	r26, r0
 b8c:	08 95       	ret

00000b8e <__prologue_saves__>:
 b8e:	2f 92       	push	r2
 b90:	3f 92       	push	r3
 b92:	4f 92       	push	r4
 b94:	5f 92       	push	r5
 b96:	6f 92       	push	r6
 b98:	7f 92       	push	r7
 b9a:	8f 92       	push	r8
 b9c:	9f 92       	push	r9
 b9e:	af 92       	push	r10
 ba0:	bf 92       	push	r11
 ba2:	cf 92       	push	r12
 ba4:	df 92       	push	r13
 ba6:	ef 92       	push	r14
 ba8:	ff 92       	push	r15
 baa:	0f 93       	push	r16
 bac:	1f 93       	push	r17
 bae:	cf 93       	push	r28
 bb0:	df 93       	push	r29
 bb2:	cd b7       	in	r28, 0x3d	; 61
 bb4:	de b7       	in	r29, 0x3e	; 62
 bb6:	ca 1b       	sub	r28, r26
 bb8:	db 0b       	sbc	r29, r27
 bba:	0f b6       	in	r0, 0x3f	; 63
 bbc:	f8 94       	cli
 bbe:	de bf       	out	0x3e, r29	; 62
 bc0:	0f be       	out	0x3f, r0	; 63
 bc2:	cd bf       	out	0x3d, r28	; 61
 bc4:	09 94       	ijmp

00000bc6 <__epilogue_restores__>:
 bc6:	2a 88       	ldd	r2, Y+18	; 0x12
 bc8:	39 88       	ldd	r3, Y+17	; 0x11
 bca:	48 88       	ldd	r4, Y+16	; 0x10
 bcc:	5f 84       	ldd	r5, Y+15	; 0x0f
 bce:	6e 84       	ldd	r6, Y+14	; 0x0e
 bd0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bd2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bd4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bd6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bd8:	b9 84       	ldd	r11, Y+9	; 0x09
 bda:	c8 84       	ldd	r12, Y+8	; 0x08
 bdc:	df 80       	ldd	r13, Y+7	; 0x07
 bde:	ee 80       	ldd	r14, Y+6	; 0x06
 be0:	fd 80       	ldd	r15, Y+5	; 0x05
 be2:	0c 81       	ldd	r16, Y+4	; 0x04
 be4:	1b 81       	ldd	r17, Y+3	; 0x03
 be6:	aa 81       	ldd	r26, Y+2	; 0x02
 be8:	b9 81       	ldd	r27, Y+1	; 0x01
 bea:	ce 0f       	add	r28, r30
 bec:	d1 1d       	adc	r29, r1
 bee:	0f b6       	in	r0, 0x3f	; 63
 bf0:	f8 94       	cli
 bf2:	de bf       	out	0x3e, r29	; 62
 bf4:	0f be       	out	0x3f, r0	; 63
 bf6:	cd bf       	out	0x3d, r28	; 61
 bf8:	ed 01       	movw	r28, r26
 bfa:	08 95       	ret

00000bfc <_exit>:
 bfc:	f8 94       	cli

00000bfe <__stop_program>:
 bfe:	ff cf       	rjmp	.-2      	; 0xbfe <__stop_program>
