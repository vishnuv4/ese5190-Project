
BrailleMate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000224  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e7d  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e4  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b83  00000000  00000000  00001c55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  000027d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007d72  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000439  00000000  00000000  0000a6fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000ab37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000032f3  00000000  00000000  0000abe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__vector_12>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	10 d0       	rcall	.+32     	; 0xbc <main>
  9c:	c1 c0       	rjmp	.+386    	; 0x220 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <Initialize>:
	//Setting 16-bit control register:Prescaling = 1024 for input compare register
	TCCR1B |= (1 << CS12);// | (1<<CS10);//|(1 << WGM12);
	/*Hit and trial value for tick tick big enough*/
	OCR1B = 200;
	//Enable output compare interrupt for output compare B
	TIMSK1 |= (1<< OCIE1B);
  a0:	f8 94       	cli
  a2:	a2 d0       	rcall	.+324    	; 0x1e8 <UART_init>
  a4:	92 d0       	rcall	.+292    	; 0x1ca <speaker_begin>
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	83 ed       	ldi	r24, 0xD3	; 211
  aa:	90 e3       	ldi	r25, 0x30	; 48
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <Initialize+0xc>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <Initialize+0x16>
  b6:	00 00       	nop
  b8:	78 94       	sei
  ba:	08 95       	ret

000000bc <main>:
  bc:	f1 df       	rcall	.-30     	; 0xa0 <Initialize>
  be:	87 e0       	ldi	r24, 0x07	; 7
  c0:	7f d0       	rcall	.+254    	; 0x1c0 <speaker_play>
  c2:	2a ea       	ldi	r18, 0xAA	; 170
  c4:	36 ee       	ldi	r19, 0xE6	; 230
  c6:	86 e9       	ldi	r24, 0x96	; 150
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	30 40       	sbci	r19, 0x00	; 0
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	d9 f7       	brne	.-10     	; 0xca <main+0xe>
  d4:	00 00       	nop
  d6:	f3 cf       	rjmp	.-26     	; 0xbe <main+0x2>

000000d8 <__vector_21>:
}

ISR(ADC_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	adc_read = (unsigned char)ADCL;
  e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	adc_read |= ((ADCH & 0x03)<<8);
  f6:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  fa:	23 70       	andi	r18, 0x03	; 3
  fc:	92 2b       	or	r25, r18
  fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 102:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	//sprintf(String,"ADC read triggered = %d\n",adc_read);
	//UART_SendData(String);
}
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
	
}
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <calculateCheckSum>:
  *array = (uint8_t)(value>>8);
  *(array+1) = (uint8_t)(value);
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
 12a:	fc 01       	movw	r30, r24
 12c:	31 96       	adiw	r30, 0x01	; 1
 12e:	ac 01       	movw	r20, r24
 130:	49 5f       	subi	r20, 0xF9	; 249
 132:	5f 4f       	sbci	r21, 0xFF	; 255
  uint16_t sum = 0;
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
    sum += buffer[i];
 138:	91 91       	ld	r25, Z+
 13a:	29 0f       	add	r18, r25
 13c:	31 1d       	adc	r19, r1
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
  uint16_t sum = 0;
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
 13e:	e4 17       	cp	r30, r20
 140:	f5 07       	cpc	r31, r21
 142:	d1 f7       	brne	.-12     	; 0x138 <calculateCheckSum+0xe>
    sum += buffer[i];
  }
  return -sum;
}
 144:	88 27       	eor	r24, r24
 146:	99 27       	eor	r25, r25
 148:	82 1b       	sub	r24, r18
 14a:	93 0b       	sbc	r25, r19
 14c:	08 95       	ret

0000014e <sendPacket>:

char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
    _packet[PKT_CMD] = cmd;
 156:	c2 e0       	ldi	r28, 0x02	; 2
 158:	d1 e0       	ldi	r29, 0x01	; 1
 15a:	8b 83       	std	Y+3, r24	; 0x03

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 15c:	7d 83       	std	Y+5, r23	; 0x05
  *(array+1) = (uint8_t)(value);
 15e:	6e 83       	std	Y+6, r22	; 0x06
char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
 160:	ce 01       	movw	r24, r28
 162:	e3 df       	rcall	.-58     	; 0x12a <calculateCheckSum>

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 164:	9f 83       	std	Y+7, r25	; 0x07
  *(array+1) = (uint8_t)(value);
 166:	88 87       	std	Y+8, r24	; 0x08
 168:	0c e0       	ldi	r16, 0x0C	; 12
 16a:	11 e0       	ldi	r17, 0x01	; 1
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
        UART_send(_packet[i]);
 16c:	89 91       	ld	r24, Y+
 16e:	50 d0       	rcall	.+160    	; 0x210 <UART_send>
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
 170:	c0 17       	cp	r28, r16
 172:	d1 07       	cpc	r29, r17
 174:	d9 f7       	brne	.-10     	; 0x16c <sendPacket+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	83 ec       	ldi	r24, 0xC3	; 195
 178:	99 e0       	ldi	r25, 0x09	; 9
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <sendPacket+0x2c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <sendPacket+0x32>
 180:	00 00       	nop
        UART_send(_packet[i]);
    }
    _delay_ms(10);
}
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <speaker_reset>:

void speaker_reset()
{
    sendPacket((uint8_t)0x0C, (uint8_t)0);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	dd cf       	rjmp	.-70     	; 0x14e <sendPacket>
 194:	08 95       	ret

00000196 <speaker_setVolume>:
}

void speaker_setVolume(uint8_t vol)
{
    sendPacket((uint8_t)0x06, (uint8_t)vol);
 196:	68 2f       	mov	r22, r24
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	d8 cf       	rjmp	.-80     	; 0x14e <sendPacket>
 19e:	08 95       	ret

000001a0 <speaker_setEQ>:
}

void speaker_setEQ()
{
    sendPacket((uint8_t)0x07, (uint8_t)0);
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	87 e0       	ldi	r24, 0x07	; 7
 1a6:	d3 cf       	rjmp	.-90     	; 0x14e <sendPacket>
 1a8:	08 95       	ret

000001aa <speaker_outputDevice>:
}

void speaker_outputDevice()
{
    sendPacket((uint8_t)0x09, (uint8_t)DFPLAYER_DEVICE_SD);
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	89 e0       	ldi	r24, 0x09	; 9
 1b0:	ce df       	rcall	.-100    	; 0x14e <sendPacket>
 1b2:	8f e4       	ldi	r24, 0x4F	; 79
 1b4:	93 ec       	ldi	r25, 0xC3	; 195
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <speaker_outputDevice+0xc>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <speaker_outputDevice+0x12>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <speaker_play>:
    _delay_ms(200);
}

void speaker_play(uint8_t file)
{
    sendPacket((uint8_t)0x03, file);
 1c0:	68 2f       	mov	r22, r24
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	c3 cf       	rjmp	.-122    	; 0x14e <sendPacket>
 1c8:	08 95       	ret

000001ca <speaker_begin>:
}

void speaker_begin()
{
    speaker_reset();
 1ca:	e0 df       	rcall	.-64     	; 0x18c <speaker_reset>
 1cc:	2f e7       	ldi	r18, 0x7F	; 127
 1ce:	8a e1       	ldi	r24, 0x1A	; 26
 1d0:	96 e0       	ldi	r25, 0x06	; 6
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <speaker_begin+0x8>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <speaker_begin+0x12>
 1dc:	00 00       	nop
    _delay_ms(2000);

    speaker_setVolume(20);
 1de:	84 e1       	ldi	r24, 0x14	; 20
    speaker_setEQ();
 1e0:	da df       	rcall	.-76     	; 0x196 <speaker_setVolume>
 1e2:	de df       	rcall	.-68     	; 0x1a0 <speaker_setEQ>
    speaker_outputDevice();
 1e4:	e2 cf       	rjmp	.-60     	; 0x1aa <speaker_outputDevice>
 1e6:	08 95       	ret

000001e8 <UART_init>:
 1e8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
void UART_init()
{
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
	UBRR0L = (unsigned char)BAUD_PRESCALER;
 1ec:	87 e6       	ldi	r24, 0x67	; 103
 1ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1f2:	e1 ec       	ldi	r30, 0xC1	; 193
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	88 e1       	ldi	r24, 0x18	; 24
 1f8:	80 83       	st	Z, r24
	/* Set frame format: 2 stop bits, 8 data bits */
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
 1fa:	a2 ec       	ldi	r26, 0xC2	; 194
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	86 e0       	ldi	r24, 0x06	; 6
 200:	8c 93       	st	X, r24
	UCSR0C |= (1<<USBS0); // 2 stop bits
 202:	8c 91       	ld	r24, X
 204:	88 60       	ori	r24, 0x08	; 8
 206:	8c 93       	st	X, r24
	
	UCSR0B |= (1<<RXCIE0);
 208:	80 81       	ld	r24, Z
 20a:	80 68       	ori	r24, 0x80	; 128
 20c:	80 83       	st	Z, r24
 20e:	08 95       	ret

00000210 <UART_send>:
}

void UART_send(unsigned char data)
{
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 210:	e0 ec       	ldi	r30, 0xC0	; 192
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	90 81       	ld	r25, Z
 216:	95 ff       	sbrs	r25, 5
 218:	fd cf       	rjmp	.-6      	; 0x214 <UART_send+0x4>
	// Put data into buffer and send data
	UDR0 = data;
 21a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
