
BrailleMate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800100  0000053c  000005d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800216  00800216  000006e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001012  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a35  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d8c  00000000  00000000  00002297  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007df4  00000000  00000000  00003290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a7  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000b82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000032f3  00000000  00000000  0000b8f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	e6 c1       	rjmp	.+972    	; 0x3da <__vector_3>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	a1 c1       	rjmp	.+834    	; 0x36c <__vector_10>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	ca c1       	rjmp	.+916    	; 0x3c6 <__vector_12>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	76 c1       	rjmp	.+748    	; 0x336 <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c1       	rjmp	.+674    	; 0x2f8 <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	55 d0       	rcall	.+170    	; 0x146 <main>
  9c:	4d c2       	rjmp	.+1178   	; 0x538 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <ADC_Init>:


void ADC_Init(void)
{
	/*Select Vref = AVcc*/
	ADMUX |= (1 << REFS0);
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	/*Trigger conversion on Timer0 compare match A*/
	ADCSRB |= (1 << ADTS0) | (1 << ADTS2);
  aa:	eb e7       	ldi	r30, 0x7B	; 123
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	80 83       	st	Z, r24
	/*Enable ADC conversion, auto trigger and interrupt generate */
	ADCSRA |= (1 << ADEN) | (1 << ADATE) | (1 << ADIE);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 6a       	ori	r24, 0xA8	; 168
  bc:	80 83       	st	Z, r24
	/*start ADC cpnversion*/
	ADCSRA |= (1 << ADSC);
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <Buzzer_PWMInit>:
	
}

void Buzzer_PWMInit(void)
{
    DDRB |= (1 << PB3);
  c6:	23 9a       	sbi	0x04, 3	; 4
    /*Set to CTC mode and toggle OC0A for every output compare match*/
    TCCR2A |= (1 << WGM20) | (1 << COM2A0);
  c8:	e0 eb       	ldi	r30, 0xB0	; 176
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 64       	ori	r24, 0x41	; 65
  d0:	80 83       	st	Z, r24
    /*Set Prescaler Value for TIMER0 to 256*/
    TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << WGM22);
  d2:	e1 eb       	ldi	r30, 0xB1	; 177
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8e 60       	ori	r24, 0x0E	; 14
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <TimerInit>:
}

void TimerInit(void)
{
	//Enable prescaling for clock source
	CLKPR |= (1 << CLKPCE);
  de:	e1 e6       	ldi	r30, 0x61	; 97
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	/*CTC mode*/
	//Setting 16-bit control register:Prescaling = 1024 for input compare register
	TCCR1B |= (1 << CS12);// | (1<<CS10);//|(1 << WGM12);
  e8:	e1 e8       	ldi	r30, 0x81	; 129
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	80 83       	st	Z, r24
	/*Hit and trial value for tick tick big enough*/
	OCR1B = 200;
  f2:	88 ec       	ldi	r24, 0xC8	; 200
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
  fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	//Enable output compare interrupt for output compare B
	TIMSK1 |= (1<< OCIE1B);
  fe:	ef e6       	ldi	r30, 0x6F	; 111
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <Initialize>:

/***************************Function Definitions*****************************/
void Initialize(void)
{
    //disable interrupt
	cli();
 10a:	f8 94       	cli
	//UART_init();
	DDRD |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
 10c:	8a b1       	in	r24, 0x0a	; 10
 10e:	8c 6f       	ori	r24, 0xFC	; 252
 110:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<PORTB2);
 112:	22 98       	cbi	0x04, 2	; 4
	PCICR |= (1<<PCIE0);
 114:	e8 e6       	ldi	r30, 0x68	; 104
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);
 11e:	eb e6       	ldi	r30, 0x6B	; 107
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 60       	ori	r24, 0x04	; 4
 126:	80 83       	st	Z, r24
	TimerInit();
 128:	da df       	rcall	.-76     	; 0xde <TimerInit>
	ADC_Init();
 12a:	ba df       	rcall	.-140    	; 0xa0 <ADC_Init>
	Buzzer_PWMInit();
 12c:	cc df       	rcall	.-104    	; 0xc6 <Buzzer_PWMInit>
 12e:	d9 d1       	rcall	.+946    	; 0x4e2 <speaker_begin>
	speaker_begin();
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	90 e3       	ldi	r25, 0x30	; 48
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <Initialize+0x2c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <Initialize+0x36>
 140:	00 00       	nop
 142:	78 94       	sei
 144:	08 95       	ret

00000146 <main>:
	_delay_ms(1000);
	sei();
 146:	f8 94       	cli
 148:	22 98       	cbi	0x04, 2	; 4
{
    //Initialize();
	/*Mode Sel push button*/
	cli();
	DDRB &= ~(1<<PORTB2);
	PCICR |= (1<<PCIE0);
 14a:	e8 e6       	ldi	r30, 0x68	; 104
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);
 154:	eb e6       	ldi	r30, 0x6B	; 107
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	80 83       	st	Z, r24
	char ChSel = 0;
	uint8_t ChCount = -1;
	int16_t offset = 0;	
	UART_init();
 15e:	d0 d1       	rcall	.+928    	; 0x500 <UART_init>
	sei();
 160:	78 94       	sei
	cli();
	DDRB &= ~(1<<PORTB2);
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT2);
	char ChSel = 0;
	uint8_t ChCount = -1;
 162:	66 24       	eor	r6, r6
 164:	6a 94       	dec	r6
	/*Mode Sel push button*/
	cli();
	DDRB &= ~(1<<PORTB2);
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT2);
	char ChSel = 0;
 166:	90 e0       	ldi	r25, 0x00	; 0
				cli();
				//UART_init();
				DDRB |= (1<<PORTB5);
				DDRD |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
				// PORTD |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
				TCCR1B |= (1<<ICES1) | (1<<ICNC1);
 168:	0f 2e       	mov	r0, r31
 16a:	f1 e8       	ldi	r31, 0x81	; 129
 16c:	8f 2e       	mov	r8, r31
 16e:	91 2c       	mov	r9, r1
 170:	f0 2d       	mov	r31, r0
				TIMSK1 |= (1<<ICIE1);
 172:	0f 2e       	mov	r0, r31
 174:	ff e6       	ldi	r31, 0x6F	; 111
 176:	ef 2e       	mov	r14, r31
 178:	f1 2c       	mov	r15, r1
 17a:	f0 2d       	mov	r31, r0
				DDRB &= ~(1<<PORTB2);
				PCICR |= (1<<PCIE0);
 17c:	08 e6       	ldi	r16, 0x68	; 104
 17e:	10 e0       	ldi	r17, 0x00	; 0
				PCMSK0 |= (1<<PCINT2);
 180:	cb e6       	ldi	r28, 0x6B	; 107
 182:	d0 e0       	ldi	r29, 0x00	; 0
				// UART_putstring(String);
				// sprintf(String,"LEarning Mode init\r\n");
				// UART_putstring(String);
				// sprintf(String,"Leartning Mode init\r\n");
				// UART_putstring(String);
				eModeEx = Run;
 184:	77 24       	eor	r7, r7
 186:	73 94       	inc	r7
				if((400 < adc_read) && (adc_read < 600))
				{
					if(ChSel)
					{
						ChSel = 0;
						ChCount = ChCount%36;
 188:	0f 2e       	mov	r0, r31
 18a:	f9 e3       	ldi	r31, 0x39	; 57
 18c:	2f 2e       	mov	r2, r31
 18e:	f0 2d       	mov	r31, r0
 190:	0f 2e       	mov	r0, r31
 192:	f4 e2       	ldi	r31, 0x24	; 36
 194:	3f 2e       	mov	r3, r31
 196:	f0 2d       	mov	r31, r0
				}
				if((400 < adc_read) && (adc_read < 600))
				{
					if(ChSel)
					{
						ChSel = 0;
 198:	51 2c       	mov	r5, r1
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
					adc_read  = 1024 ;//max impossible value for adc
 19a:	c1 2c       	mov	r12, r1
 19c:	68 94       	set
 19e:	dd 24       	eor	r13, r13
 1a0:	d2 f8       	bld	r13, 2
						else
						{
							//sprintf(String,"Prev Character\n");
							//UART_SendData(String);
						}
						OCR2A = 70;
 1a2:	0f 2e       	mov	r0, r31
 1a4:	f3 eb       	ldi	r31, 0xB3	; 179
 1a6:	af 2e       	mov	r10, r31
 1a8:	b1 2c       	mov	r11, r1
 1aa:	f0 2d       	mov	r31, r0
 1ac:	0f 2e       	mov	r0, r31
 1ae:	f6 e4       	ldi	r31, 0x46	; 70
 1b0:	4f 2e       	mov	r4, r31
 1b2:	f0 2d       	mov	r31, r0
	sei();
	while (1) // loop forever
	{
		//sprintf(String,"Mode selected%d\r\n",eModeSel);
		//UART_putstring(String);
		if(Learning == eModeSel)
 1b4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <eModeSel>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <main+0x78>
 1bc:	6e c0       	rjmp	.+220    	; 0x29a <main+0x154>
		{
			if(Init == eModeEx)
 1be:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
 1c2:	81 11       	cpse	r24, r1
				// UART_putstring(String);
				// sprintf(String,"Reading Mode init\r\n");
				// UART_putstring(String);
				// sprintf(String,"Reading Mode init\r\n");
				// UART_putstring(String);
				Initialize();
 1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <main+0x8e>
 1c6:	a1 df       	rcall	.-190    	; 0x10a <Initialize>
				ChSel = 0;
				ChCount = -1;
				offset = 0;
				eModeEx = Run;
 1c8:	70 92 16 02 	sts	0x0216, r7	; 0x800216 <__data_end>
				// UART_putstring(String);
				// sprintf(String,"Reading Mode init\r\n");
				// UART_putstring(String);
				Initialize();
				ChSel = 0;
				ChCount = -1;
 1cc:	66 24       	eor	r6, r6
 1ce:	6a 94       	dec	r6
				// sprintf(String,"Reading Mode init\r\n");
				// UART_putstring(String);
				// sprintf(String,"Reading Mode init\r\n");
				// UART_putstring(String);
				Initialize();
				ChSel = 0;
 1d0:	95 2d       	mov	r25, r5
 1d2:	f0 cf       	rjmp	.-32     	; 0x1b4 <main+0x6e>
				ChCount = -1;
				offset = 0;
				eModeEx = Run;
				
			}
			else  if(Run == eModeEx)
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	71 f7       	brne	.-36     	; 0x1b4 <main+0x6e>
			{
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
 1d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	a9 01       	movw	r20, r18
 1e2:	49 55       	subi	r20, 0x59	; 89
 1e4:	52 40       	sbci	r21, 0x02	; 2
 1e6:	47 3a       	cpi	r20, 0xA7	; 167
 1e8:	51 40       	sbci	r21, 0x01	; 1
 1ea:	20 f0       	brcs	.+8      	; 0x1f4 <main+0xae>
 1ec:	20 39       	cpi	r18, 0x90	; 144
 1ee:	e1 e0       	ldi	r30, 0x01	; 1
 1f0:	3e 07       	cpc	r19, r30
 1f2:	48 f5       	brcc	.+82     	; 0x246 <main+0x100>
				{
					offset = ((adc_read ) < 512)?-1:1;
 1f4:	21 15       	cp	r18, r1
 1f6:	32 40       	sbci	r19, 0x02	; 2
 1f8:	08 f4       	brcc	.+2      	; 0x1fc <main+0xb6>
 1fa:	75 c0       	rjmp	.+234    	; 0x2e6 <main+0x1a0>
 1fc:	6d c0       	rjmp	.+218    	; 0x2d8 <main+0x192>
					adc_read  = 1024 ;//max impossible value for adc
					if(ChSel == 1)
					{
						//print
						if((offset < 0) && (ChCount == 0))
 1fe:	61 10       	cpse	r6, r1
 200:	06 c0       	rjmp	.+12     	; 0x20e <main+0xc8>
			{
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
 202:	8f ef       	ldi	r24, 0xFF	; 255
					if(ChSel == 1)
					{
						//print
						if((offset < 0) && (ChCount == 0))
						{
							ChCount = 36;//26 alphabets+10numbers
 204:	0f 2e       	mov	r0, r31
 206:	f4 e2       	ldi	r31, 0x24	; 36
 208:	6f 2e       	mov	r6, r31
 20a:	f0 2d       	mov	r31, r0
 20c:	03 c0       	rjmp	.+6      	; 0x214 <main+0xce>
			{
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	01 c0       	rjmp	.+2      	; 0x214 <main+0xce>
 212:	87 2d       	mov	r24, r7
						//print
						if((offset < 0) && (ChCount == 0))
						{
							ChCount = 36;//26 alphabets+10numbers
						}
						ChCount += offset;
 214:	68 0e       	add	r6, r24
						else
						{
							//sprintf(String,"Prev Character\n");
							//UART_SendData(String);
						}
						OCR2A = 70;
 216:	f5 01       	movw	r30, r10
 218:	40 82       	st	Z, r4
 21a:	ff ef       	ldi	r31, 0xFF	; 255
 21c:	29 e6       	ldi	r18, 0x69	; 105
 21e:	88 e1       	ldi	r24, 0x18	; 24
 220:	f1 50       	subi	r31, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0xda>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0xe4>
 22a:	00 00       	nop
						_delay_ms(500);
						OCR2A = 0;
 22c:	f5 01       	movw	r30, r10
 22e:	10 82       	st	Z, r1
						ChSel = 1;
						//sprintf(String,"Character sel started\n");
						//UART_SendData(String);
					}
				}
				if((400 < adc_read) && (adc_read < 600))
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 234:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 238:	81 59       	subi	r24, 0x91	; 145
 23a:	91 40       	sbci	r25, 0x01	; 1
 23c:	87 3c       	cpi	r24, 0xC7	; 199
 23e:	91 05       	cpc	r25, r1
 240:	78 f0       	brcs	.+30     	; 0x260 <main+0x11a>
 242:	97 2d       	mov	r25, r7
 244:	b7 cf       	rjmp	.-146    	; 0x1b4 <main+0x6e>
 246:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 24a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 24e:	21 59       	subi	r18, 0x91	; 145
 250:	31 40       	sbci	r19, 0x01	; 1
 252:	27 3c       	cpi	r18, 0xC7	; 199
 254:	31 05       	cpc	r19, r1
 256:	08 f0       	brcs	.+2      	; 0x25a <main+0x114>
 258:	ad cf       	rjmp	.-166    	; 0x1b4 <main+0x6e>
				{
					if(ChSel)
 25a:	99 23       	and	r25, r25
 25c:	09 f4       	brne	.+2      	; 0x260 <main+0x11a>
 25e:	aa cf       	rjmp	.-172    	; 0x1b4 <main+0x6e>
					{
						ChSel = 0;
						ChCount = ChCount%36;
 260:	62 9c       	mul	r6, r2
 262:	81 2d       	mov	r24, r1
 264:	11 24       	eor	r1, r1
 266:	86 95       	lsr	r24
 268:	86 95       	lsr	r24
 26a:	86 95       	lsr	r24
 26c:	83 9d       	mul	r24, r3
 26e:	60 18       	sub	r6, r0
 270:	11 24       	eor	r1, r1
						//sprintf(String,"INPUT READ = %c ch count = %d\n",char_value[ChCount],ChCount);
						//UART_SendData(String);
						PORTD = char_lookup[ChCount];
 272:	86 2d       	mov	r24, r6
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	fc 01       	movw	r30, r24
 278:	e6 53       	subi	r30, 0x36	; 54
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	20 81       	ld	r18, Z
 27e:	2b b9       	out	0x0b, r18	; 11
						/*speaker play module*/
						speaker_play(speaker_lookup[char_value[ChCount] - ' ']);
 280:	fc 01       	movw	r30, r24
 282:	e0 51       	subi	r30, 0x10	; 16
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	e0 81       	ld	r30, Z
 288:	0e 2e       	mov	r0, r30
 28a:	00 0c       	add	r0, r0
 28c:	ff 0b       	sbc	r31, r31
 28e:	e4 51       	subi	r30, 0x14	; 20
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	80 81       	ld	r24, Z
 294:	21 d1       	rcall	.+578    	; 0x4d8 <speaker_play>
				}
				if((400 < adc_read) && (adc_read < 600))
				{
					if(ChSel)
					{
						ChSel = 0;
 296:	95 2d       	mov	r25, r5
 298:	8d cf       	rjmp	.-230    	; 0x1b4 <main+0x6e>
						speaker_play(speaker_lookup[char_value[ChCount] - ' ']);
					}
				}
			}
		}		
		else if(Reading == eModeSel)
 29a:	81 11       	cpse	r24, r1
 29c:	8b cf       	rjmp	.-234    	; 0x1b4 <main+0x6e>
		{
			//sprintf(String,"Learning Mode\n");
			//UART_putstring(String);
			if(Init == eModeEx)
 29e:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
 2a2:	81 11       	cpse	r24, r1
 2a4:	87 cf       	rjmp	.-242    	; 0x1b4 <main+0x6e>
			{
				
				cli();
 2a6:	f8 94       	cli
				//UART_init();
				DDRB |= (1<<PORTB5);
 2a8:	25 9a       	sbi	0x04, 5	; 4
				DDRD |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
 2aa:	8a b1       	in	r24, 0x0a	; 10
 2ac:	8c 6f       	ori	r24, 0xFC	; 252
 2ae:	8a b9       	out	0x0a, r24	; 10
				// PORTD |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
				TCCR1B |= (1<<ICES1) | (1<<ICNC1);
 2b0:	f4 01       	movw	r30, r8
 2b2:	80 81       	ld	r24, Z
 2b4:	80 6c       	ori	r24, 0xC0	; 192
 2b6:	80 83       	st	Z, r24
				TIMSK1 |= (1<<ICIE1);
 2b8:	f7 01       	movw	r30, r14
 2ba:	80 81       	ld	r24, Z
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	80 83       	st	Z, r24
				DDRB &= ~(1<<PORTB2);
 2c0:	22 98       	cbi	0x04, 2	; 4
				PCICR |= (1<<PCIE0);
 2c2:	f8 01       	movw	r30, r16
 2c4:	80 81       	ld	r24, Z
 2c6:	81 60       	ori	r24, 0x01	; 1
 2c8:	80 83       	st	Z, r24
				PCMSK0 |= (1<<PCINT2);
 2ca:	88 81       	ld	r24, Y
 2cc:	84 60       	ori	r24, 0x04	; 4
 2ce:	88 83       	st	Y, r24
				sei();
 2d0:	78 94       	sei
				// UART_putstring(String);
				// sprintf(String,"LEarning Mode init\r\n");
				// UART_putstring(String);
				// sprintf(String,"Leartning Mode init\r\n");
				// UART_putstring(String);
				eModeEx = Run;
 2d2:	70 92 16 02 	sts	0x0216, r7	; 0x800216 <__data_end>
 2d6:	6e cf       	rjmp	.-292    	; 0x1b4 <main+0x6e>
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
					adc_read  = 1024 ;//max impossible value for adc
 2d8:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
 2dc:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
					if(ChSel == 1)
 2e0:	91 30       	cpi	r25, 0x01	; 1
 2e2:	41 f4       	brne	.+16     	; 0x2f4 <main+0x1ae>
 2e4:	96 cf       	rjmp	.-212    	; 0x212 <main+0xcc>
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
					adc_read  = 1024 ;//max impossible value for adc
 2e6:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
 2ea:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
					if(ChSel == 1)
 2ee:	91 30       	cpi	r25, 0x01	; 1
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <main+0x1ae>
 2f2:	85 cf       	rjmp	.-246    	; 0x1fe <main+0xb8>
						ChSel = 1;
						//sprintf(String,"Character sel started\n");
						//UART_SendData(String);
					}
				}
				if((400 < adc_read) && (adc_read < 600))
 2f4:	97 2d       	mov	r25, r7
 2f6:	5e cf       	rjmp	.-324    	; 0x1b4 <main+0x6e>

000002f8 <__vector_21>:
	//Enable output compare interrupt for output compare B
	TIMSK1 |= (1<< OCIE1B);
}

ISR(ADC_vect)
{
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	2f 93       	push	r18
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
	adc_read = (unsigned char)ADCL;
 308:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 312:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	adc_read |= ((ADCH & 0x03)<<8);
 316:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 31a:	23 70       	andi	r18, 0x03	; 3
 31c:	92 2b       	or	r25, r18
 31e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 322:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	//sprintf(String,"ADC read triggered = %d\n",adc_read);
	//UART_SendData(String);
}
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__vector_18>:



ISR(USART_RX_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	8f 93       	push	r24
 342:	ef 93       	push	r30
 344:	ff 93       	push	r31
	rcv = UDR0;
 346:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 34a:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <rcv>
	PORTD = char_lookup_read[rcv-' '];
 34e:	0e 2e       	mov	r0, r30
 350:	00 0c       	add	r0, r0
 352:	ff 0b       	sbc	r31, r31
 354:	e5 5b       	subi	r30, 0xB5	; 181
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	80 81       	ld	r24, Z
 35a:	8b b9       	out	0x0b, r24	; 11
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	8f 91       	pop	r24
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
	UART_send('n');
 38e:	8e e6       	ldi	r24, 0x6E	; 110
 390:	cb d0       	rcall	.+406    	; 0x528 <UART_send>
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	80 e7       	ldi	r24, 0x70	; 112
 396:	92 e0       	ldi	r25, 0x02	; 2
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <__vector_10+0x2c>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <__vector_10+0x36>
 3a2:	00 00       	nop
	_delay_ms(50);
}
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__vector_12>:


ISR(TIMER1_COMPB_vect)
{
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
	
}
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__vector_3>:

ISR(PCINT0_vect)
{
 3da:	1f 92       	push	r1
 3dc:	0f 92       	push	r0
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	0f 92       	push	r0
 3e2:	11 24       	eor	r1, r1
 3e4:	2f 93       	push	r18
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
	PCMSK0 &= ~(1<<PCINT2);
 3ee:	eb e6       	ldi	r30, 0x6B	; 107
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	8b 7f       	andi	r24, 0xFB	; 251
 3f6:	80 83       	st	Z, r24
	//sprintf(String,"Mode Change request =\r\n");
	//UART_putstring(String);
	if(( PINB & (1<<PB2)))
 3f8:	1a 9b       	sbis	0x03, 2	; 3
 3fa:	0b c0       	rjmp	.+22     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{		
		if(eModeEx == Run)
 3fc:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	39 f4       	brne	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		{
			eModeSel ^= 1;
 404:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <eModeSel>
 408:	89 27       	eor	r24, r25
 40a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <eModeSel>
			eModeEx = Init;
 40e:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end>
 412:	2f ef       	ldi	r18, 0xFF	; 255
 414:	83 ed       	ldi	r24, 0xD3	; 211
 416:	90 e3       	ldi	r25, 0x30	; 48
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 422:	00 00       	nop
			//sprintf(String,"Mode Change= %d\r\n",eModeSel);
			//UART_putstring(String);
		}
	}
	 _delay_ms(1000);       
	 PCMSK0 |= (1<<PCINT2);                                                                                                                                                                            
 424:	eb e6       	ldi	r30, 0x6B	; 107
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	84 60       	ori	r24, 0x04	; 4
 42c:	80 83       	st	Z, r24
}
 42e:	ff 91       	pop	r31
 430:	ef 91       	pop	r30
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <calculateCheckSum>:
  *array = (uint8_t)(value>>8);
  *(array+1) = (uint8_t)(value);
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
 442:	fc 01       	movw	r30, r24
 444:	31 96       	adiw	r30, 0x01	; 1
 446:	ac 01       	movw	r20, r24
 448:	49 5f       	subi	r20, 0xF9	; 249
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
  uint16_t sum = 0;
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
    sum += buffer[i];
 450:	91 91       	ld	r25, Z+
 452:	29 0f       	add	r18, r25
 454:	31 1d       	adc	r19, r1
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
  uint16_t sum = 0;
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
 456:	e4 17       	cp	r30, r20
 458:	f5 07       	cpc	r31, r21
 45a:	d1 f7       	brne	.-12     	; 0x450 <calculateCheckSum+0xe>
    sum += buffer[i];
  }
  return -sum;
}
 45c:	88 27       	eor	r24, r24
 45e:	99 27       	eor	r25, r25
 460:	82 1b       	sub	r24, r18
 462:	93 0b       	sbc	r25, r19
 464:	08 95       	ret

00000466 <sendPacket>:

char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
    _packet[PKT_CMD] = cmd;
 46e:	c2 e0       	ldi	r28, 0x02	; 2
 470:	d1 e0       	ldi	r29, 0x01	; 1
 472:	8b 83       	std	Y+3, r24	; 0x03

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 474:	7d 83       	std	Y+5, r23	; 0x05
  *(array+1) = (uint8_t)(value);
 476:	6e 83       	std	Y+6, r22	; 0x06
char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
 478:	ce 01       	movw	r24, r28
 47a:	e3 df       	rcall	.-58     	; 0x442 <calculateCheckSum>

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 47c:	9f 83       	std	Y+7, r25	; 0x07
  *(array+1) = (uint8_t)(value);
 47e:	88 87       	std	Y+8, r24	; 0x08
 480:	0c e0       	ldi	r16, 0x0C	; 12
 482:	11 e0       	ldi	r17, 0x01	; 1
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
        UART_send(_packet[i]);
 484:	89 91       	ld	r24, Y+
 486:	50 d0       	rcall	.+160    	; 0x528 <UART_send>
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
 488:	c0 17       	cp	r28, r16
 48a:	d1 07       	cpc	r29, r17
 48c:	d9 f7       	brne	.-10     	; 0x484 <sendPacket+0x1e>
 48e:	83 ec       	ldi	r24, 0xC3	; 195
 490:	99 e0       	ldi	r25, 0x09	; 9
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <sendPacket+0x2c>
 496:	00 c0       	rjmp	.+0      	; 0x498 <sendPacket+0x32>
 498:	00 00       	nop
        UART_send(_packet[i]);
    }
    _delay_ms(10);
}
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	08 95       	ret

000004a4 <speaker_reset>:

void speaker_reset()
{
    sendPacket((uint8_t)0x0C, (uint8_t)0);
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	70 e0       	ldi	r23, 0x00	; 0
 4a8:	8c e0       	ldi	r24, 0x0C	; 12
 4aa:	dd cf       	rjmp	.-70     	; 0x466 <sendPacket>
 4ac:	08 95       	ret

000004ae <speaker_setVolume>:
}

void speaker_setVolume(uint8_t vol)
{
    sendPacket((uint8_t)0x06, (uint8_t)vol);
 4ae:	68 2f       	mov	r22, r24
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	86 e0       	ldi	r24, 0x06	; 6
 4b4:	d8 cf       	rjmp	.-80     	; 0x466 <sendPacket>
 4b6:	08 95       	ret

000004b8 <speaker_setEQ>:
}

void speaker_setEQ()
{
    sendPacket((uint8_t)0x07, (uint8_t)0);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	70 e0       	ldi	r23, 0x00	; 0
 4bc:	87 e0       	ldi	r24, 0x07	; 7
 4be:	d3 cf       	rjmp	.-90     	; 0x466 <sendPacket>
 4c0:	08 95       	ret

000004c2 <speaker_outputDevice>:
}

void speaker_outputDevice()
{
    sendPacket((uint8_t)0x09, (uint8_t)DFPLAYER_DEVICE_SD);
 4c2:	62 e0       	ldi	r22, 0x02	; 2
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	89 e0       	ldi	r24, 0x09	; 9
 4c8:	ce df       	rcall	.-100    	; 0x466 <sendPacket>
 4ca:	8f e4       	ldi	r24, 0x4F	; 79
 4cc:	93 ec       	ldi	r25, 0xC3	; 195
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <speaker_outputDevice+0xc>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <speaker_outputDevice+0x12>
 4d4:	00 00       	nop
 4d6:	08 95       	ret

000004d8 <speaker_play>:
    _delay_ms(200);
}

void speaker_play(uint8_t file)
{
    sendPacket((uint8_t)0x03, file);
 4d8:	68 2f       	mov	r22, r24
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	c3 cf       	rjmp	.-122    	; 0x466 <sendPacket>
 4e0:	08 95       	ret

000004e2 <speaker_begin>:
}

void speaker_begin()
{
    speaker_reset();
 4e2:	e0 df       	rcall	.-64     	; 0x4a4 <speaker_reset>
 4e4:	2f e7       	ldi	r18, 0x7F	; 127
 4e6:	8a e1       	ldi	r24, 0x1A	; 26
 4e8:	96 e0       	ldi	r25, 0x06	; 6
 4ea:	21 50       	subi	r18, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <speaker_begin+0x8>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <speaker_begin+0x12>
 4f4:	00 00       	nop
    _delay_ms(2000);

    speaker_setVolume(20);
 4f6:	84 e1       	ldi	r24, 0x14	; 20
    speaker_setEQ();
 4f8:	da df       	rcall	.-76     	; 0x4ae <speaker_setVolume>
 4fa:	de df       	rcall	.-68     	; 0x4b8 <speaker_setEQ>
    speaker_outputDevice();
 4fc:	e2 cf       	rjmp	.-60     	; 0x4c2 <speaker_outputDevice>
 4fe:	08 95       	ret

00000500 <UART_init>:
 500:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
void UART_init()
{
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
	UBRR0L = (unsigned char)BAUD_PRESCALER;
 504:	87 e6       	ldi	r24, 0x67	; 103
 506:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 50a:	e1 ec       	ldi	r30, 0xC1	; 193
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	88 e1       	ldi	r24, 0x18	; 24
 510:	80 83       	st	Z, r24
	/* Set frame format: 2 stop bits, 8 data bits */
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
 512:	a2 ec       	ldi	r26, 0xC2	; 194
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	86 e0       	ldi	r24, 0x06	; 6
 518:	8c 93       	st	X, r24
	UCSR0C |= (1<<USBS0); // 2 stop bits
 51a:	8c 91       	ld	r24, X
 51c:	88 60       	ori	r24, 0x08	; 8
 51e:	8c 93       	st	X, r24
	
	UCSR0B |= (1<<RXCIE0);
 520:	80 81       	ld	r24, Z
 522:	80 68       	ori	r24, 0x80	; 128
 524:	80 83       	st	Z, r24
 526:	08 95       	ret

00000528 <UART_send>:
}

void UART_send(unsigned char data)
{
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 528:	e0 ec       	ldi	r30, 0xC0	; 192
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	90 81       	ld	r25, Z
 52e:	95 ff       	sbrs	r25, 5
 530:	fd cf       	rjmp	.-6      	; 0x52c <UART_send+0x4>
	// Put data into buffer and send data
	UDR0 = data;
 532:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 536:	08 95       	ret

00000538 <_exit>:
 538:	f8 94       	cli

0000053a <__stop_program>:
 53a:	ff cf       	rjmp	.-2      	; 0x53a <__stop_program>
