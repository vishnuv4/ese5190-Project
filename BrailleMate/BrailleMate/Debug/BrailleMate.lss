
BrailleMate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013c  00800100  00000bae  00000c42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080023c  0080023c  00000d7e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c2  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a45  00000000  00000000  00001fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dba  00000000  00000000  00002a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  000037d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007dfb  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085d  00000000  00000000  0000b877  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000032f3  00000000  00000000  0000c19c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c2       	rjmp	.+1070   	; 0x43c <__vector_3>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	d2 c1       	rjmp	.+932    	; 0x3ce <__vector_10>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	fb c1       	rjmp	.+1014   	; 0x428 <__vector_12>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	a7 c1       	rjmp	.+846    	; 0x398 <__vector_18>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	82 c1       	rjmp	.+772    	; 0x35a <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 35       	cpi	r26, 0x58	; 88
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	55 d0       	rcall	.+170    	; 0x146 <main>
  9c:	86 c5       	rjmp	.+2828   	; 0xbaa <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <ADC_Init>:


void ADC_Init(void)
{
	/*Select Vref = AVcc*/
	ADMUX |= (1 << REFS0);
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	/*Trigger conversion on Timer0 compare match A*/
	ADCSRB |= (1 << ADTS0) | (1 << ADTS2);
  aa:	eb e7       	ldi	r30, 0x7B	; 123
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	80 83       	st	Z, r24
	/*Enable ADC conversion, auto trigger and interrupt generate */
	ADCSRA |= (1 << ADEN) | (1 << ADATE) | (1 << ADIE);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 6a       	ori	r24, 0xA8	; 168
  bc:	80 83       	st	Z, r24
	/*start ADC cpnversion*/
	ADCSRA |= (1 << ADSC);
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <Buzzer_PWMInit>:
	
}

void Buzzer_PWMInit(void)
{
    DDRB |= (1 << PB3);
  c6:	23 9a       	sbi	0x04, 3	; 4
    /*Set to CTC mode and toggle OC0A for every output compare match*/
    TCCR2A |= (1 << WGM20) | (1 << COM2A0);
  c8:	e0 eb       	ldi	r30, 0xB0	; 176
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 64       	ori	r24, 0x41	; 65
  d0:	80 83       	st	Z, r24
    /*Set Prescaler Value for TIMER0 to 256*/
    TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << WGM22);
  d2:	e1 eb       	ldi	r30, 0xB1	; 177
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8e 60       	ori	r24, 0x0E	; 14
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <TimerInit>:
}

void TimerInit(void)
{
	//Enable prescaling for clock source
	CLKPR |= (1 << CLKPCE);
  de:	e1 e6       	ldi	r30, 0x61	; 97
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	/*CTC mode*/
	//Setting 16-bit control register:Prescaling = 1024 for input compare register
	TCCR1B |= (1 << CS12);// | (1<<CS10);//|(1 << WGM12);
  e8:	e1 e8       	ldi	r30, 0x81	; 129
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	80 83       	st	Z, r24
	/*Hit and trial value for tick tick big enough*/
	OCR1B = 200;
  f2:	88 ec       	ldi	r24, 0xC8	; 200
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
  fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	//Enable output compare interrupt for output compare B
	TIMSK1 |= (1<< OCIE1B);
  fe:	ef e6       	ldi	r30, 0x6F	; 111
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <Initialize>:

/***************************Function Definitions*****************************/
void Initialize(void)
{
    //disable interrupt
	cli();
 10a:	f8 94       	cli
	//UART_init();
	DDRD |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
 10c:	8a b1       	in	r24, 0x0a	; 10
 10e:	8c 6f       	ori	r24, 0xFC	; 252
 110:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~(1<<PORTB2);
 112:	22 98       	cbi	0x04, 2	; 4
	PCICR |= (1<<PCIE0);
 114:	e8 e6       	ldi	r30, 0x68	; 104
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);
 11e:	eb e6       	ldi	r30, 0x6B	; 107
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 60       	ori	r24, 0x04	; 4
 126:	80 83       	st	Z, r24
	TimerInit();
 128:	da df       	rcall	.-76     	; 0xde <TimerInit>
	ADC_Init();
 12a:	ba df       	rcall	.-140    	; 0xa0 <ADC_Init>
	Buzzer_PWMInit();
 12c:	cc df       	rcall	.-104    	; 0xc6 <Buzzer_PWMInit>
 12e:	2c d2       	rcall	.+1112   	; 0x588 <speaker_begin>
	speaker_begin();
 130:	2f ef       	ldi	r18, 0xFF	; 255
 132:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	90 e3       	ldi	r25, 0x30	; 48
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <Initialize+0x2c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <Initialize+0x36>
 140:	00 00       	nop
 142:	78 94       	sei
 144:	08 95       	ret

00000146 <main>:
	_delay_ms(1000);
	sei();
 146:	f8 94       	cli
 148:	22 98       	cbi	0x04, 2	; 4
{
    //Initialize();
	/*Mode Sel push button*/
	cli();
	DDRB &= ~(1<<PORTB2);
	PCICR |= (1<<PCIE0);
 14a:	e8 e6       	ldi	r30, 0x68	; 104
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	81 60       	ori	r24, 0x01	; 1
 152:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);
 154:	eb e6       	ldi	r30, 0x6B	; 107
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	84 60       	ori	r24, 0x04	; 4
 15c:	80 83       	st	Z, r24
	char ChSel = 0;
	uint8_t ChCount = -1;
	int16_t offset = 0;	
	UART_init();
 15e:	23 d2       	rcall	.+1094   	; 0x5a6 <UART_init>
	sei();
 160:	78 94       	sei
	cli();
	DDRB &= ~(1<<PORTB2);
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT2);
	char ChSel = 0;
	uint8_t ChCount = -1;
 162:	66 24       	eor	r6, r6
 164:	6a 94       	dec	r6
	/*Mode Sel push button*/
	cli();
	DDRB &= ~(1<<PORTB2);
	PCICR |= (1<<PCIE0);
	PCMSK0 |= (1<<PCINT2);
	char ChSel = 0;
 166:	90 e0       	ldi	r25, 0x00	; 0
				
				cli();
				//UART_init();
				DDRB |= (1<<PORTB5);
				DDRB |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
				TCCR1B |= (1<<ICES1) | (1<<ICNC1);
 168:	0f 2e       	mov	r0, r31
 16a:	f1 e8       	ldi	r31, 0x81	; 129
 16c:	cf 2e       	mov	r12, r31
 16e:	d1 2c       	mov	r13, r1
 170:	f0 2d       	mov	r31, r0
				TIMSK1 |= (1<<ICIE1);
 172:	0f 2e       	mov	r0, r31
 174:	ff e6       	ldi	r31, 0x6F	; 111
 176:	ef 2e       	mov	r14, r31
 178:	f1 2c       	mov	r15, r1
 17a:	f0 2d       	mov	r31, r0
				DDRB &= ~(1<<PORTB2);
				PCICR |= (1<<PCIE0);
 17c:	08 e6       	ldi	r16, 0x68	; 104
 17e:	10 e0       	ldi	r17, 0x00	; 0
				PCMSK0 |= (1<<PCINT2);
 180:	cb e6       	ldi	r28, 0x6B	; 107
 182:	d0 e0       	ldi	r29, 0x00	; 0
				sei();
				eModeEx = Run;
 184:	77 24       	eor	r7, r7
 186:	73 94       	inc	r7
				if((400 < adc_read) && (adc_read < 600))
				{
					if(ChSel)
					{
						ChSel = 0;
						ChCount = ChCount%36;
 188:	0f 2e       	mov	r0, r31
 18a:	f9 e3       	ldi	r31, 0x39	; 57
 18c:	2f 2e       	mov	r2, r31
 18e:	f0 2d       	mov	r31, r0
 190:	0f 2e       	mov	r0, r31
 192:	f4 e2       	ldi	r31, 0x24	; 36
 194:	3f 2e       	mov	r3, r31
 196:	f0 2d       	mov	r31, r0
				}
				if((400 < adc_read) && (adc_read < 600))
				{
					if(ChSel)
					{
						ChSel = 0;
 198:	51 2c       	mov	r5, r1
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
					adc_read  = 1024 ;//max impossible value for adc
 19a:	a1 2c       	mov	r10, r1
 19c:	68 94       	set
 19e:	bb 24       	eor	r11, r11
 1a0:	b2 f8       	bld	r11, 2
						else
						{
							//sprintf(String,"Prev Character\n");
							//UART_SendData(String);
						}
						OCR2A = 70;
 1a2:	0f 2e       	mov	r0, r31
 1a4:	f3 eb       	ldi	r31, 0xB3	; 179
 1a6:	8f 2e       	mov	r8, r31
 1a8:	91 2c       	mov	r9, r1
 1aa:	f0 2d       	mov	r31, r0
 1ac:	0f 2e       	mov	r0, r31
 1ae:	f6 e4       	ldi	r31, 0x46	; 70
 1b0:	4f 2e       	mov	r4, r31
 1b2:	f0 2d       	mov	r31, r0
	sei();
	while (1) // loop forever
	{
		//sprintf(String,"Mode selected%d\r\n",eModeSel);
		//UART_putstring(String);
		if(Learning == eModeSel)
 1b4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <eModeSel>
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	09 f0       	breq	.+2      	; 0x1be <main+0x78>
 1bc:	9f c0       	rjmp	.+318    	; 0x2fc <main+0x1b6>
		{
			if(Init == eModeEx)
 1be:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
 1c2:	81 11       	cpse	r24, r1
 1c4:	37 c0       	rjmp	.+110    	; 0x234 <main+0xee>
			{
				sprintf(String,"Reading Mode init\r\n");
 1c6:	84 e1       	ldi	r24, 0x14	; 20
 1c8:	ec e0       	ldi	r30, 0x0C	; 12
 1ca:	f1 e0       	ldi	r31, 0x01	; 1
 1cc:	af e3       	ldi	r26, 0x3F	; 63
 1ce:	b2 e0       	ldi	r27, 0x02	; 2
 1d0:	01 90       	ld	r0, Z+
 1d2:	0d 92       	st	X+, r0
 1d4:	8a 95       	dec	r24
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x8a>
				UART_putstring(String);
 1d8:	8f e3       	ldi	r24, 0x3F	; 63
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	00 d2       	rcall	.+1024   	; 0x5de <UART_putstring>
				sprintf(String,"Reading Mode init\r\n");
 1de:	84 e1       	ldi	r24, 0x14	; 20
 1e0:	ec e0       	ldi	r30, 0x0C	; 12
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	af e3       	ldi	r26, 0x3F	; 63
 1e6:	b2 e0       	ldi	r27, 0x02	; 2
 1e8:	01 90       	ld	r0, Z+
 1ea:	0d 92       	st	X+, r0
 1ec:	8a 95       	dec	r24
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xa2>
				UART_putstring(String);
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	92 e0       	ldi	r25, 0x02	; 2
 1f4:	f4 d1       	rcall	.+1000   	; 0x5de <UART_putstring>
				sprintf(String,"Reading Mode init\r\n");
 1f6:	84 e1       	ldi	r24, 0x14	; 20
 1f8:	ec e0       	ldi	r30, 0x0C	; 12
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	af e3       	ldi	r26, 0x3F	; 63
 1fe:	b2 e0       	ldi	r27, 0x02	; 2
 200:	01 90       	ld	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	8a 95       	dec	r24
				UART_putstring(String);
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0xba>
 208:	8f e3       	ldi	r24, 0x3F	; 63
 20a:	92 e0       	ldi	r25, 0x02	; 2
 20c:	e8 d1       	rcall	.+976    	; 0x5de <UART_putstring>
				sprintf(String,"Reading Mode init\r\n");
 20e:	84 e1       	ldi	r24, 0x14	; 20
 210:	ec e0       	ldi	r30, 0x0C	; 12
 212:	f1 e0       	ldi	r31, 0x01	; 1
 214:	af e3       	ldi	r26, 0x3F	; 63
 216:	b2 e0       	ldi	r27, 0x02	; 2
 218:	01 90       	ld	r0, Z+
 21a:	0d 92       	st	X+, r0
 21c:	8a 95       	dec	r24
				UART_putstring(String);
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0xd2>
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	dc d1       	rcall	.+952    	; 0x5de <UART_putstring>
				Initialize();
 226:	71 df       	rcall	.-286    	; 0x10a <Initialize>
 228:	70 92 3c 02 	sts	0x023C, r7	; 0x80023c <__data_end>
				ChSel = 0;
				ChCount = -1;
				offset = 0;
				eModeEx = Run;
 22c:	66 24       	eor	r6, r6
				UART_putstring(String);
				sprintf(String,"Reading Mode init\r\n");
				UART_putstring(String);
				Initialize();
				ChSel = 0;
				ChCount = -1;
 22e:	6a 94       	dec	r6
 230:	95 2d       	mov	r25, r5
				sprintf(String,"Reading Mode init\r\n");
				UART_putstring(String);
				sprintf(String,"Reading Mode init\r\n");
				UART_putstring(String);
				Initialize();
				ChSel = 0;
 232:	c0 cf       	rjmp	.-128    	; 0x1b4 <main+0x6e>
 234:	81 30       	cpi	r24, 0x01	; 1
				ChCount = -1;
				offset = 0;
				eModeEx = Run;
				
			}
			else  if(Run == eModeEx)
 236:	09 f0       	breq	.+2      	; 0x23a <main+0xf4>
 238:	bd cf       	rjmp	.-134    	; 0x1b4 <main+0x6e>
 23a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
			{
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
 23e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 242:	a9 01       	movw	r20, r18
 244:	49 55       	subi	r20, 0x59	; 89
 246:	52 40       	sbci	r21, 0x02	; 2
 248:	47 3a       	cpi	r20, 0xA7	; 167
 24a:	51 40       	sbci	r21, 0x01	; 1
 24c:	20 f0       	brcs	.+8      	; 0x256 <main+0x110>
 24e:	20 39       	cpi	r18, 0x90	; 144
 250:	e1 e0       	ldi	r30, 0x01	; 1
 252:	3e 07       	cpc	r19, r30
 254:	48 f5       	brcc	.+82     	; 0x2a8 <main+0x162>
 256:	21 15       	cp	r18, r1
				{
					offset = ((adc_read ) < 512)?-1:1;
 258:	32 40       	sbci	r19, 0x02	; 2
 25a:	08 f4       	brcc	.+2      	; 0x25e <main+0x118>
 25c:	75 c0       	rjmp	.+234    	; 0x348 <main+0x202>
 25e:	6d c0       	rjmp	.+218    	; 0x33a <main+0x1f4>
 260:	61 10       	cpse	r6, r1
					adc_read  = 1024 ;//max impossible value for adc
					if(ChSel == 1)
					{
						//print
						if((offset < 0) && (ChCount == 0))
 262:	06 c0       	rjmp	.+12     	; 0x270 <main+0x12a>
 264:	8f ef       	ldi	r24, 0xFF	; 255
			{
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
 266:	0f 2e       	mov	r0, r31
					if(ChSel == 1)
					{
						//print
						if((offset < 0) && (ChCount == 0))
						{
							ChCount = 36;
 268:	f4 e2       	ldi	r31, 0x24	; 36
 26a:	6f 2e       	mov	r6, r31
 26c:	f0 2d       	mov	r31, r0
 26e:	03 c0       	rjmp	.+6      	; 0x276 <main+0x130>
 270:	8f ef       	ldi	r24, 0xFF	; 255
			{
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
 272:	01 c0       	rjmp	.+2      	; 0x276 <main+0x130>
 274:	87 2d       	mov	r24, r7
 276:	68 0e       	add	r6, r24
						//print
						if((offset < 0) && (ChCount == 0))
						{
							ChCount = 36;
						}
						ChCount += offset;
 278:	f4 01       	movw	r30, r8
						else
						{
							//sprintf(String,"Prev Character\n");
							//UART_SendData(String);
						}
						OCR2A = 70;
 27a:	40 82       	st	Z, r4
 27c:	ff ef       	ldi	r31, 0xFF	; 255
 27e:	29 e6       	ldi	r18, 0x69	; 105
 280:	88 e1       	ldi	r24, 0x18	; 24
 282:	f1 50       	subi	r31, 0x01	; 1
 284:	20 40       	sbci	r18, 0x00	; 0
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x13c>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <main+0x146>
 28c:	00 00       	nop
 28e:	f4 01       	movw	r30, r8
						_delay_ms(500);
						OCR2A = 0;
 290:	10 82       	st	Z, r1
 292:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
						ChSel = 1;
						//sprintf(String,"Character sel started\n");
						//UART_SendData(String);
					}
				}
				if((400 < adc_read) && (adc_read < 600))
 296:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 29a:	81 59       	subi	r24, 0x91	; 145
 29c:	91 40       	sbci	r25, 0x01	; 1
 29e:	87 3c       	cpi	r24, 0xC7	; 199
 2a0:	91 05       	cpc	r25, r1
 2a2:	78 f0       	brcs	.+30     	; 0x2c2 <main+0x17c>
 2a4:	97 2d       	mov	r25, r7
 2a6:	86 cf       	rjmp	.-244    	; 0x1b4 <main+0x6e>
 2a8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2b0:	21 59       	subi	r18, 0x91	; 145
 2b2:	31 40       	sbci	r19, 0x01	; 1
 2b4:	27 3c       	cpi	r18, 0xC7	; 199
 2b6:	31 05       	cpc	r19, r1
 2b8:	08 f0       	brcs	.+2      	; 0x2bc <main+0x176>
 2ba:	7c cf       	rjmp	.-264    	; 0x1b4 <main+0x6e>
 2bc:	99 23       	and	r25, r25
				{
					if(ChSel)
 2be:	09 f4       	brne	.+2      	; 0x2c2 <main+0x17c>
 2c0:	79 cf       	rjmp	.-270    	; 0x1b4 <main+0x6e>
 2c2:	62 9c       	mul	r6, r2
					{
						ChSel = 0;
						ChCount = ChCount%36;
 2c4:	81 2d       	mov	r24, r1
 2c6:	11 24       	eor	r1, r1
 2c8:	86 95       	lsr	r24
 2ca:	86 95       	lsr	r24
 2cc:	86 95       	lsr	r24
 2ce:	83 9d       	mul	r24, r3
 2d0:	60 18       	sub	r6, r0
 2d2:	11 24       	eor	r1, r1
 2d4:	86 2d       	mov	r24, r6
						//sprintf(String,"INPUT READ = %c ch count = %d\n",char_value[ChCount],ChCount);
						//UART_SendData(String);
						PORTD = char_lookup[ChCount];
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	e0 51       	subi	r30, 0x10	; 16
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	20 81       	ld	r18, Z
 2e0:	2b b9       	out	0x0b, r18	; 11
 2e2:	fc 01       	movw	r30, r24
						/*speaker play module*/
						speaker_play(speaker_lookup[char_value[ChCount] - ' ']);
 2e4:	ea 5e       	subi	r30, 0xEA	; 234
 2e6:	fd 4f       	sbci	r31, 0xFD	; 253
 2e8:	e0 81       	ld	r30, Z
 2ea:	0e 2e       	mov	r0, r30
 2ec:	00 0c       	add	r0, r0
 2ee:	ff 0b       	sbc	r31, r31
 2f0:	ee 5e       	subi	r30, 0xEE	; 238
 2f2:	fe 4f       	sbci	r31, 0xFE	; 254
 2f4:	80 81       	ld	r24, Z
 2f6:	43 d1       	rcall	.+646    	; 0x57e <speaker_play>
 2f8:	95 2d       	mov	r25, r5
				}
				if((400 < adc_read) && (adc_read < 600))
				{
					if(ChSel)
					{
						ChSel = 0;
 2fa:	5c cf       	rjmp	.-328    	; 0x1b4 <main+0x6e>
 2fc:	81 11       	cpse	r24, r1
						speaker_play(speaker_lookup[char_value[ChCount] - ' ']);
					}
				}
			}
		}		
		else if(Reading == eModeSel)
 2fe:	5a cf       	rjmp	.-332    	; 0x1b4 <main+0x6e>
 300:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
		{
			//sprintf(String,"Learning Mode\n");
			//UART_putstring(String);
			if(Init == eModeEx)
 304:	81 11       	cpse	r24, r1
 306:	56 cf       	rjmp	.-340    	; 0x1b4 <main+0x6e>
 308:	f8 94       	cli
			{
				
				cli();
 30a:	25 9a       	sbi	0x04, 5	; 4
				//UART_init();
				DDRB |= (1<<PORTB5);
 30c:	84 b1       	in	r24, 0x04	; 4
				DDRB |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
 30e:	8c 6f       	ori	r24, 0xFC	; 252
 310:	84 b9       	out	0x04, r24	; 4
 312:	f6 01       	movw	r30, r12
				TCCR1B |= (1<<ICES1) | (1<<ICNC1);
 314:	80 81       	ld	r24, Z
 316:	80 6c       	ori	r24, 0xC0	; 192
 318:	80 83       	st	Z, r24
 31a:	f7 01       	movw	r30, r14
				TIMSK1 |= (1<<ICIE1);
 31c:	80 81       	ld	r24, Z
 31e:	80 62       	ori	r24, 0x20	; 32
 320:	80 83       	st	Z, r24
 322:	22 98       	cbi	0x04, 2	; 4
				DDRB &= ~(1<<PORTB2);
 324:	f8 01       	movw	r30, r16
				PCICR |= (1<<PCIE0);
 326:	80 81       	ld	r24, Z
 328:	81 60       	ori	r24, 0x01	; 1
 32a:	80 83       	st	Z, r24
 32c:	88 81       	ld	r24, Y
				PCMSK0 |= (1<<PCINT2);
 32e:	84 60       	ori	r24, 0x04	; 4
 330:	88 83       	st	Y, r24
 332:	78 94       	sei
				sei();
 334:	70 92 3c 02 	sts	0x023C, r7	; 0x80023c <__data_end>
				eModeEx = Run;
 338:	3d cf       	rjmp	.-390    	; 0x1b4 <main+0x6e>
 33a:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
					adc_read  = 1024 ;//max impossible value for adc
 33e:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
 342:	91 30       	cpi	r25, 0x01	; 1
					if(ChSel == 1)
 344:	41 f4       	brne	.+16     	; 0x356 <main+0x210>
 346:	96 cf       	rjmp	.-212    	; 0x274 <main+0x12e>
 348:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <__data_start+0x1>
				//sprintf(String,"Reading Mode running mode\r\n");
				//UART_putstring(String);
				if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
				{
					offset = ((adc_read ) < 512)?-1:1;
					adc_read  = 1024 ;//max impossible value for adc
 34c:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_start>
 350:	91 30       	cpi	r25, 0x01	; 1
					if(ChSel == 1)
 352:	09 f4       	brne	.+2      	; 0x356 <main+0x210>
 354:	85 cf       	rjmp	.-246    	; 0x260 <main+0x11a>
 356:	97 2d       	mov	r25, r7
						ChSel = 1;
						//sprintf(String,"Character sel started\n");
						//UART_SendData(String);
					}
				}
				if((400 < adc_read) && (adc_read < 600))
 358:	2d cf       	rjmp	.-422    	; 0x1b4 <main+0x6e>

0000035a <__vector_21>:
 35a:	1f 92       	push	r1
	//Enable output compare interrupt for output compare B
	TIMSK1 |= (1<< OCIE1B);
}

ISR(ADC_vect)
{
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	2f 93       	push	r18
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
	adc_read = (unsigned char)ADCL;
 36a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 374:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	adc_read |= ((ADCH & 0x03)<<8);
 378:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 37c:	23 70       	andi	r18, 0x03	; 3
 37e:	92 2b       	or	r25, r18
 380:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 384:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	//sprintf(String,"ADC read triggered = %d\n",adc_read);
	//UART_SendData(String);
}
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <__vector_18>:



ISR(USART_RX_vect)
{
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	8f 93       	push	r24
 3a4:	ef 93       	push	r30
 3a6:	ff 93       	push	r31
	rcv = UDR0;
 3a8:	e0 91 c6 00 	lds	r30, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 3ac:	e0 93 3e 02 	sts	0x023E, r30	; 0x80023e <rcv>
	PORTD = char_lookup_read[rcv-' '];
 3b0:	0e 2e       	mov	r0, r30
 3b2:	00 0c       	add	r0, r0
 3b4:	ff 0b       	sbc	r31, r31
 3b6:	ef 58       	subi	r30, 0x8F	; 143
 3b8:	fe 4f       	sbci	r31, 0xFE	; 254
 3ba:	80 81       	ld	r24, Z
 3bc:	8b b9       	out	0x0b, r24	; 11
}
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	8f 91       	pop	r24
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
	UART_send('n');
 3f0:	8e e6       	ldi	r24, 0x6E	; 110
 3f2:	ed d0       	rcall	.+474    	; 0x5ce <UART_send>
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	80 e7       	ldi	r24, 0x70	; 112
 3f8:	92 e0       	ldi	r25, 0x02	; 2
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	80 40       	sbci	r24, 0x00	; 0
 3fe:	90 40       	sbci	r25, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <__vector_10+0x2c>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_ms(50);
}
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	7f 91       	pop	r23
 414:	6f 91       	pop	r22
 416:	5f 91       	pop	r21
 418:	4f 91       	pop	r20
 41a:	3f 91       	pop	r19
 41c:	2f 91       	pop	r18
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

00000428 <__vector_12>:


ISR(TIMER1_COMPB_vect)
{
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
	
}
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <__vector_3>:

ISR(PCINT0_vect)
{
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
	PCMSK0 &= ~(1<<PCINT2);
 45e:	eb e6       	ldi	r30, 0x6B	; 107
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	8b 7f       	andi	r24, 0xFB	; 251
 466:	80 83       	st	Z, r24
	//sprintf(String,"Mode Change request =\r\n");
	//UART_putstring(String);
	if(!( PINB & (1<<PB2)))
 468:	1a 99       	sbic	0x03, 2	; 3
 46a:	1f c0       	rjmp	.+62     	; 0x4aa <__vector_3+0x6e>
	{		
		if(eModeEx == Run)
 46c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__data_end>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	d9 f4       	brne	.+54     	; 0x4aa <__vector_3+0x6e>
		{
			eModeSel ^= 1;
 474:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <eModeSel>
 478:	89 27       	eor	r24, r25
 47a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <eModeSel>
			eModeEx = Init;
 47e:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <__data_end>
			sprintf(String,"Mode Change= %d\r\n",eModeSel);
 482:	1f 92       	push	r1
 484:	8f 93       	push	r24
 486:	80 e2       	ldi	r24, 0x20	; 32
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	9f 93       	push	r25
 48c:	8f 93       	push	r24
 48e:	8f e3       	ldi	r24, 0x3F	; 63
 490:	92 e0       	ldi	r25, 0x02	; 2
 492:	9f 93       	push	r25
 494:	8f 93       	push	r24
 496:	b1 d0       	rcall	.+354    	; 0x5fa <sprintf>
			UART_putstring(String);
 498:	8f e3       	ldi	r24, 0x3F	; 63
 49a:	92 e0       	ldi	r25, 0x02	; 2
 49c:	a0 d0       	rcall	.+320    	; 0x5de <UART_putstring>
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	83 ed       	ldi	r24, 0xD3	; 211
 4ae:	90 e3       	ldi	r25, 0x30	; 48
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <__vector_3+0x74>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__vector_3+0x7e>
 4ba:	00 00       	nop
		}
	}
	 _delay_ms(1000);       
	 PCMSK0 |= (1<<PCINT2);                                                                                                                                                                            
 4bc:	eb e6       	ldi	r30, 0x6B	; 107
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	84 60       	ori	r24, 0x04	; 4
 4c4:	80 83       	st	Z, r24
}
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
 4ca:	bf 91       	pop	r27
 4cc:	af 91       	pop	r26
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	7f 91       	pop	r23
 4d4:	6f 91       	pop	r22
 4d6:	5f 91       	pop	r21
 4d8:	4f 91       	pop	r20
 4da:	3f 91       	pop	r19
 4dc:	2f 91       	pop	r18
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <calculateCheckSum>:
  *array = (uint8_t)(value>>8);
  *(array+1) = (uint8_t)(value);
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
 4e8:	fc 01       	movw	r30, r24
 4ea:	31 96       	adiw	r30, 0x01	; 1
 4ec:	ac 01       	movw	r20, r24
 4ee:	49 5f       	subi	r20, 0xF9	; 249
 4f0:	5f 4f       	sbci	r21, 0xFF	; 255
  uint16_t sum = 0;
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	30 e0       	ldi	r19, 0x00	; 0
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
    sum += buffer[i];
 4f6:	91 91       	ld	r25, Z+
 4f8:	29 0f       	add	r18, r25
 4fa:	31 1d       	adc	r19, r1
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
  uint16_t sum = 0;
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
 4fc:	e4 17       	cp	r30, r20
 4fe:	f5 07       	cpc	r31, r21
 500:	d1 f7       	brne	.-12     	; 0x4f6 <calculateCheckSum+0xe>
    sum += buffer[i];
  }
  return -sum;
}
 502:	88 27       	eor	r24, r24
 504:	99 27       	eor	r25, r25
 506:	82 1b       	sub	r24, r18
 508:	93 0b       	sbc	r25, r19
 50a:	08 95       	ret

0000050c <sendPacket>:

char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
 50c:	0f 93       	push	r16
 50e:	1f 93       	push	r17
 510:	cf 93       	push	r28
 512:	df 93       	push	r29
    _packet[PKT_CMD] = cmd;
 514:	c2 e0       	ldi	r28, 0x02	; 2
 516:	d1 e0       	ldi	r29, 0x01	; 1
 518:	8b 83       	std	Y+3, r24	; 0x03

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 51a:	7d 83       	std	Y+5, r23	; 0x05
  *(array+1) = (uint8_t)(value);
 51c:	6e 83       	std	Y+6, r22	; 0x06
char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
 51e:	ce 01       	movw	r24, r28
 520:	e3 df       	rcall	.-58     	; 0x4e8 <calculateCheckSum>

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 522:	9f 83       	std	Y+7, r25	; 0x07
  *(array+1) = (uint8_t)(value);
 524:	88 87       	std	Y+8, r24	; 0x08
 526:	0c e0       	ldi	r16, 0x0C	; 12
 528:	11 e0       	ldi	r17, 0x01	; 1
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
        UART_send(_packet[i]);
 52a:	89 91       	ld	r24, Y+
 52c:	50 d0       	rcall	.+160    	; 0x5ce <UART_send>
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
 52e:	c0 17       	cp	r28, r16
 530:	d1 07       	cpc	r29, r17
 532:	d9 f7       	brne	.-10     	; 0x52a <sendPacket+0x1e>
 534:	83 ec       	ldi	r24, 0xC3	; 195
 536:	99 e0       	ldi	r25, 0x09	; 9
 538:	01 97       	sbiw	r24, 0x01	; 1
 53a:	f1 f7       	brne	.-4      	; 0x538 <sendPacket+0x2c>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <sendPacket+0x32>
 53e:	00 00       	nop
        UART_send(_packet[i]);
    }
    _delay_ms(10);
}
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	1f 91       	pop	r17
 546:	0f 91       	pop	r16
 548:	08 95       	ret

0000054a <speaker_reset>:

void speaker_reset()
{
    sendPacket((uint8_t)0x0C, (uint8_t)0);
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	70 e0       	ldi	r23, 0x00	; 0
 54e:	8c e0       	ldi	r24, 0x0C	; 12
 550:	dd cf       	rjmp	.-70     	; 0x50c <sendPacket>
 552:	08 95       	ret

00000554 <speaker_setVolume>:
}

void speaker_setVolume(uint8_t vol)
{
    sendPacket((uint8_t)0x06, (uint8_t)vol);
 554:	68 2f       	mov	r22, r24
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	86 e0       	ldi	r24, 0x06	; 6
 55a:	d8 cf       	rjmp	.-80     	; 0x50c <sendPacket>
 55c:	08 95       	ret

0000055e <speaker_setEQ>:
}

void speaker_setEQ()
{
    sendPacket((uint8_t)0x07, (uint8_t)0);
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	87 e0       	ldi	r24, 0x07	; 7
 564:	d3 cf       	rjmp	.-90     	; 0x50c <sendPacket>
 566:	08 95       	ret

00000568 <speaker_outputDevice>:
}

void speaker_outputDevice()
{
    sendPacket((uint8_t)0x09, (uint8_t)DFPLAYER_DEVICE_SD);
 568:	62 e0       	ldi	r22, 0x02	; 2
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	89 e0       	ldi	r24, 0x09	; 9
 56e:	ce df       	rcall	.-100    	; 0x50c <sendPacket>
 570:	8f e4       	ldi	r24, 0x4F	; 79
 572:	93 ec       	ldi	r25, 0xC3	; 195
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <speaker_outputDevice+0xc>
 578:	00 c0       	rjmp	.+0      	; 0x57a <speaker_outputDevice+0x12>
 57a:	00 00       	nop
 57c:	08 95       	ret

0000057e <speaker_play>:
    _delay_ms(200);
}

void speaker_play(uint8_t file)
{
    sendPacket((uint8_t)0x03, file);
 57e:	68 2f       	mov	r22, r24
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	83 e0       	ldi	r24, 0x03	; 3
 584:	c3 cf       	rjmp	.-122    	; 0x50c <sendPacket>
 586:	08 95       	ret

00000588 <speaker_begin>:
}

void speaker_begin()
{
    speaker_reset();
 588:	e0 df       	rcall	.-64     	; 0x54a <speaker_reset>
 58a:	2f e7       	ldi	r18, 0x7F	; 127
 58c:	8a e1       	ldi	r24, 0x1A	; 26
 58e:	96 e0       	ldi	r25, 0x06	; 6
 590:	21 50       	subi	r18, 0x01	; 1
 592:	80 40       	sbci	r24, 0x00	; 0
 594:	90 40       	sbci	r25, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <speaker_begin+0x8>
 598:	00 c0       	rjmp	.+0      	; 0x59a <speaker_begin+0x12>
 59a:	00 00       	nop
    _delay_ms(2000);

    speaker_setVolume(20);
 59c:	84 e1       	ldi	r24, 0x14	; 20
    speaker_setEQ();
 59e:	da df       	rcall	.-76     	; 0x554 <speaker_setVolume>
 5a0:	de df       	rcall	.-68     	; 0x55e <speaker_setEQ>
    speaker_outputDevice();
 5a2:	e2 cf       	rjmp	.-60     	; 0x568 <speaker_outputDevice>
 5a4:	08 95       	ret

000005a6 <UART_init>:
 5a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
void UART_init()
{
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
	UBRR0L = (unsigned char)BAUD_PRESCALER;
 5aa:	87 e6       	ldi	r24, 0x67	; 103
 5ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 5b0:	e1 ec       	ldi	r30, 0xC1	; 193
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	88 e1       	ldi	r24, 0x18	; 24
 5b6:	80 83       	st	Z, r24
	/* Set frame format: 2 stop bits, 8 data bits */
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
 5b8:	a2 ec       	ldi	r26, 0xC2	; 194
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	86 e0       	ldi	r24, 0x06	; 6
 5be:	8c 93       	st	X, r24
	UCSR0C |= (1<<USBS0); // 2 stop bits
 5c0:	8c 91       	ld	r24, X
 5c2:	88 60       	ori	r24, 0x08	; 8
 5c4:	8c 93       	st	X, r24
	
	UCSR0B |= (1<<RXCIE0);
 5c6:	80 81       	ld	r24, Z
 5c8:	80 68       	ori	r24, 0x80	; 128
 5ca:	80 83       	st	Z, r24
 5cc:	08 95       	ret

000005ce <UART_send>:
}

void UART_send(unsigned char data)
{
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 5ce:	e0 ec       	ldi	r30, 0xC0	; 192
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	90 81       	ld	r25, Z
 5d4:	95 ff       	sbrs	r25, 5
 5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <UART_send+0x4>
	// Put data into buffer and send data
	UDR0 = data;
 5d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 5dc:	08 95       	ret

000005de <UART_putstring>:
	
}

void UART_putstring(char* StringPtr)
{
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
 5e4:	88 81       	ld	r24, Y
 5e6:	88 23       	and	r24, r24
 5e8:	29 f0       	breq	.+10     	; 0x5f4 <UART_putstring+0x16>
 5ea:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_send(*StringPtr);
 5ec:	f0 df       	rcall	.-32     	; 0x5ce <UART_send>
	
}

void UART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00)
 5ee:	89 91       	ld	r24, Y+
 5f0:	81 11       	cpse	r24, r1
 5f2:	fc cf       	rjmp	.-8      	; 0x5ec <UART_putstring+0xe>
	{
		UART_send(*StringPtr);
		StringPtr++;
	}
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	08 95       	ret

000005fa <sprintf>:
 5fa:	ae e0       	ldi	r26, 0x0E	; 14
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	e2 e0       	ldi	r30, 0x02	; 2
 600:	f3 e0       	ldi	r31, 0x03	; 3
 602:	aa c2       	rjmp	.+1364   	; 0xb58 <__prologue_saves__+0x1c>
 604:	0d 89       	ldd	r16, Y+21	; 0x15
 606:	1e 89       	ldd	r17, Y+22	; 0x16
 608:	86 e0       	ldi	r24, 0x06	; 6
 60a:	8c 83       	std	Y+4, r24	; 0x04
 60c:	1a 83       	std	Y+2, r17	; 0x02
 60e:	09 83       	std	Y+1, r16	; 0x01
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	9f e7       	ldi	r25, 0x7F	; 127
 614:	9e 83       	std	Y+6, r25	; 0x06
 616:	8d 83       	std	Y+5, r24	; 0x05
 618:	ae 01       	movw	r20, r28
 61a:	47 5e       	subi	r20, 0xE7	; 231
 61c:	5f 4f       	sbci	r21, 0xFF	; 255
 61e:	6f 89       	ldd	r22, Y+23	; 0x17
 620:	78 8d       	ldd	r23, Y+24	; 0x18
 622:	ce 01       	movw	r24, r28
 624:	01 96       	adiw	r24, 0x01	; 1
 626:	08 d0       	rcall	.+16     	; 0x638 <vfprintf>
 628:	ef 81       	ldd	r30, Y+7	; 0x07
 62a:	f8 85       	ldd	r31, Y+8	; 0x08
 62c:	e0 0f       	add	r30, r16
 62e:	f1 1f       	adc	r31, r17
 630:	10 82       	st	Z, r1
 632:	2e 96       	adiw	r28, 0x0e	; 14
 634:	e4 e0       	ldi	r30, 0x04	; 4
 636:	ac c2       	rjmp	.+1368   	; 0xb90 <__epilogue_restores__+0x1c>

00000638 <vfprintf>:
 638:	ab e0       	ldi	r26, 0x0B	; 11
 63a:	b0 e0       	ldi	r27, 0x00	; 0
 63c:	e1 e2       	ldi	r30, 0x21	; 33
 63e:	f3 e0       	ldi	r31, 0x03	; 3
 640:	7d c2       	rjmp	.+1274   	; 0xb3c <__prologue_saves__>
 642:	6c 01       	movw	r12, r24
 644:	7b 01       	movw	r14, r22
 646:	8a 01       	movw	r16, r20
 648:	fc 01       	movw	r30, r24
 64a:	17 82       	std	Z+7, r1	; 0x07
 64c:	16 82       	std	Z+6, r1	; 0x06
 64e:	83 81       	ldd	r24, Z+3	; 0x03
 650:	81 ff       	sbrs	r24, 1
 652:	bf c1       	rjmp	.+894    	; 0x9d2 <__stack+0xd3>
 654:	ce 01       	movw	r24, r28
 656:	01 96       	adiw	r24, 0x01	; 1
 658:	3c 01       	movw	r6, r24
 65a:	f6 01       	movw	r30, r12
 65c:	93 81       	ldd	r25, Z+3	; 0x03
 65e:	f7 01       	movw	r30, r14
 660:	93 fd       	sbrc	r25, 3
 662:	85 91       	lpm	r24, Z+
 664:	93 ff       	sbrs	r25, 3
 666:	81 91       	ld	r24, Z+
 668:	7f 01       	movw	r14, r30
 66a:	88 23       	and	r24, r24
 66c:	09 f4       	brne	.+2      	; 0x670 <vfprintf+0x38>
 66e:	ad c1       	rjmp	.+858    	; 0x9ca <__stack+0xcb>
 670:	85 32       	cpi	r24, 0x25	; 37
 672:	39 f4       	brne	.+14     	; 0x682 <vfprintf+0x4a>
 674:	93 fd       	sbrc	r25, 3
 676:	85 91       	lpm	r24, Z+
 678:	93 ff       	sbrs	r25, 3
 67a:	81 91       	ld	r24, Z+
 67c:	7f 01       	movw	r14, r30
 67e:	85 32       	cpi	r24, 0x25	; 37
 680:	21 f4       	brne	.+8      	; 0x68a <vfprintf+0x52>
 682:	b6 01       	movw	r22, r12
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	c0 d1       	rcall	.+896    	; 0xa08 <fputc>
 688:	e8 cf       	rjmp	.-48     	; 0x65a <vfprintf+0x22>
 68a:	91 2c       	mov	r9, r1
 68c:	21 2c       	mov	r2, r1
 68e:	31 2c       	mov	r3, r1
 690:	ff e1       	ldi	r31, 0x1F	; 31
 692:	f3 15       	cp	r31, r3
 694:	d8 f0       	brcs	.+54     	; 0x6cc <vfprintf+0x94>
 696:	8b 32       	cpi	r24, 0x2B	; 43
 698:	79 f0       	breq	.+30     	; 0x6b8 <vfprintf+0x80>
 69a:	38 f4       	brcc	.+14     	; 0x6aa <vfprintf+0x72>
 69c:	80 32       	cpi	r24, 0x20	; 32
 69e:	79 f0       	breq	.+30     	; 0x6be <vfprintf+0x86>
 6a0:	83 32       	cpi	r24, 0x23	; 35
 6a2:	a1 f4       	brne	.+40     	; 0x6cc <vfprintf+0x94>
 6a4:	23 2d       	mov	r18, r3
 6a6:	20 61       	ori	r18, 0x10	; 16
 6a8:	1d c0       	rjmp	.+58     	; 0x6e4 <vfprintf+0xac>
 6aa:	8d 32       	cpi	r24, 0x2D	; 45
 6ac:	61 f0       	breq	.+24     	; 0x6c6 <vfprintf+0x8e>
 6ae:	80 33       	cpi	r24, 0x30	; 48
 6b0:	69 f4       	brne	.+26     	; 0x6cc <vfprintf+0x94>
 6b2:	23 2d       	mov	r18, r3
 6b4:	21 60       	ori	r18, 0x01	; 1
 6b6:	16 c0       	rjmp	.+44     	; 0x6e4 <vfprintf+0xac>
 6b8:	83 2d       	mov	r24, r3
 6ba:	82 60       	ori	r24, 0x02	; 2
 6bc:	38 2e       	mov	r3, r24
 6be:	e3 2d       	mov	r30, r3
 6c0:	e4 60       	ori	r30, 0x04	; 4
 6c2:	3e 2e       	mov	r3, r30
 6c4:	2a c0       	rjmp	.+84     	; 0x71a <vfprintf+0xe2>
 6c6:	f3 2d       	mov	r31, r3
 6c8:	f8 60       	ori	r31, 0x08	; 8
 6ca:	1d c0       	rjmp	.+58     	; 0x706 <vfprintf+0xce>
 6cc:	37 fc       	sbrc	r3, 7
 6ce:	2d c0       	rjmp	.+90     	; 0x72a <vfprintf+0xf2>
 6d0:	20 ed       	ldi	r18, 0xD0	; 208
 6d2:	28 0f       	add	r18, r24
 6d4:	2a 30       	cpi	r18, 0x0A	; 10
 6d6:	40 f0       	brcs	.+16     	; 0x6e8 <vfprintf+0xb0>
 6d8:	8e 32       	cpi	r24, 0x2E	; 46
 6da:	b9 f4       	brne	.+46     	; 0x70a <vfprintf+0xd2>
 6dc:	36 fc       	sbrc	r3, 6
 6de:	75 c1       	rjmp	.+746    	; 0x9ca <__stack+0xcb>
 6e0:	23 2d       	mov	r18, r3
 6e2:	20 64       	ori	r18, 0x40	; 64
 6e4:	32 2e       	mov	r3, r18
 6e6:	19 c0       	rjmp	.+50     	; 0x71a <vfprintf+0xe2>
 6e8:	36 fe       	sbrs	r3, 6
 6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <vfprintf+0xc0>
 6ec:	8a e0       	ldi	r24, 0x0A	; 10
 6ee:	98 9e       	mul	r9, r24
 6f0:	20 0d       	add	r18, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	92 2e       	mov	r9, r18
 6f6:	11 c0       	rjmp	.+34     	; 0x71a <vfprintf+0xe2>
 6f8:	ea e0       	ldi	r30, 0x0A	; 10
 6fa:	2e 9e       	mul	r2, r30
 6fc:	20 0d       	add	r18, r0
 6fe:	11 24       	eor	r1, r1
 700:	22 2e       	mov	r2, r18
 702:	f3 2d       	mov	r31, r3
 704:	f0 62       	ori	r31, 0x20	; 32
 706:	3f 2e       	mov	r3, r31
 708:	08 c0       	rjmp	.+16     	; 0x71a <vfprintf+0xe2>
 70a:	8c 36       	cpi	r24, 0x6C	; 108
 70c:	21 f4       	brne	.+8      	; 0x716 <vfprintf+0xde>
 70e:	83 2d       	mov	r24, r3
 710:	80 68       	ori	r24, 0x80	; 128
 712:	38 2e       	mov	r3, r24
 714:	02 c0       	rjmp	.+4      	; 0x71a <vfprintf+0xe2>
 716:	88 36       	cpi	r24, 0x68	; 104
 718:	41 f4       	brne	.+16     	; 0x72a <vfprintf+0xf2>
 71a:	f7 01       	movw	r30, r14
 71c:	93 fd       	sbrc	r25, 3
 71e:	85 91       	lpm	r24, Z+
 720:	93 ff       	sbrs	r25, 3
 722:	81 91       	ld	r24, Z+
 724:	7f 01       	movw	r14, r30
 726:	81 11       	cpse	r24, r1
 728:	b3 cf       	rjmp	.-154    	; 0x690 <vfprintf+0x58>
 72a:	98 2f       	mov	r25, r24
 72c:	9f 7d       	andi	r25, 0xDF	; 223
 72e:	95 54       	subi	r25, 0x45	; 69
 730:	93 30       	cpi	r25, 0x03	; 3
 732:	28 f4       	brcc	.+10     	; 0x73e <vfprintf+0x106>
 734:	0c 5f       	subi	r16, 0xFC	; 252
 736:	1f 4f       	sbci	r17, 0xFF	; 255
 738:	9f e3       	ldi	r25, 0x3F	; 63
 73a:	99 83       	std	Y+1, r25	; 0x01
 73c:	0d c0       	rjmp	.+26     	; 0x758 <vfprintf+0x120>
 73e:	83 36       	cpi	r24, 0x63	; 99
 740:	31 f0       	breq	.+12     	; 0x74e <vfprintf+0x116>
 742:	83 37       	cpi	r24, 0x73	; 115
 744:	71 f0       	breq	.+28     	; 0x762 <vfprintf+0x12a>
 746:	83 35       	cpi	r24, 0x53	; 83
 748:	09 f0       	breq	.+2      	; 0x74c <vfprintf+0x114>
 74a:	55 c0       	rjmp	.+170    	; 0x7f6 <vfprintf+0x1be>
 74c:	20 c0       	rjmp	.+64     	; 0x78e <vfprintf+0x156>
 74e:	f8 01       	movw	r30, r16
 750:	80 81       	ld	r24, Z
 752:	89 83       	std	Y+1, r24	; 0x01
 754:	0e 5f       	subi	r16, 0xFE	; 254
 756:	1f 4f       	sbci	r17, 0xFF	; 255
 758:	88 24       	eor	r8, r8
 75a:	83 94       	inc	r8
 75c:	91 2c       	mov	r9, r1
 75e:	53 01       	movw	r10, r6
 760:	12 c0       	rjmp	.+36     	; 0x786 <vfprintf+0x14e>
 762:	28 01       	movw	r4, r16
 764:	f2 e0       	ldi	r31, 0x02	; 2
 766:	4f 0e       	add	r4, r31
 768:	51 1c       	adc	r5, r1
 76a:	f8 01       	movw	r30, r16
 76c:	a0 80       	ld	r10, Z
 76e:	b1 80       	ldd	r11, Z+1	; 0x01
 770:	36 fe       	sbrs	r3, 6
 772:	03 c0       	rjmp	.+6      	; 0x77a <vfprintf+0x142>
 774:	69 2d       	mov	r22, r9
 776:	70 e0       	ldi	r23, 0x00	; 0
 778:	02 c0       	rjmp	.+4      	; 0x77e <vfprintf+0x146>
 77a:	6f ef       	ldi	r22, 0xFF	; 255
 77c:	7f ef       	ldi	r23, 0xFF	; 255
 77e:	c5 01       	movw	r24, r10
 780:	38 d1       	rcall	.+624    	; 0x9f2 <strnlen>
 782:	4c 01       	movw	r8, r24
 784:	82 01       	movw	r16, r4
 786:	f3 2d       	mov	r31, r3
 788:	ff 77       	andi	r31, 0x7F	; 127
 78a:	3f 2e       	mov	r3, r31
 78c:	15 c0       	rjmp	.+42     	; 0x7b8 <vfprintf+0x180>
 78e:	28 01       	movw	r4, r16
 790:	22 e0       	ldi	r18, 0x02	; 2
 792:	42 0e       	add	r4, r18
 794:	51 1c       	adc	r5, r1
 796:	f8 01       	movw	r30, r16
 798:	a0 80       	ld	r10, Z
 79a:	b1 80       	ldd	r11, Z+1	; 0x01
 79c:	36 fe       	sbrs	r3, 6
 79e:	03 c0       	rjmp	.+6      	; 0x7a6 <vfprintf+0x16e>
 7a0:	69 2d       	mov	r22, r9
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <vfprintf+0x172>
 7a6:	6f ef       	ldi	r22, 0xFF	; 255
 7a8:	7f ef       	ldi	r23, 0xFF	; 255
 7aa:	c5 01       	movw	r24, r10
 7ac:	17 d1       	rcall	.+558    	; 0x9dc <strnlen_P>
 7ae:	4c 01       	movw	r8, r24
 7b0:	f3 2d       	mov	r31, r3
 7b2:	f0 68       	ori	r31, 0x80	; 128
 7b4:	3f 2e       	mov	r3, r31
 7b6:	82 01       	movw	r16, r4
 7b8:	33 fc       	sbrc	r3, 3
 7ba:	19 c0       	rjmp	.+50     	; 0x7ee <vfprintf+0x1b6>
 7bc:	82 2d       	mov	r24, r2
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	88 16       	cp	r8, r24
 7c2:	99 06       	cpc	r9, r25
 7c4:	a0 f4       	brcc	.+40     	; 0x7ee <vfprintf+0x1b6>
 7c6:	b6 01       	movw	r22, r12
 7c8:	80 e2       	ldi	r24, 0x20	; 32
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	1d d1       	rcall	.+570    	; 0xa08 <fputc>
 7ce:	2a 94       	dec	r2
 7d0:	f5 cf       	rjmp	.-22     	; 0x7bc <vfprintf+0x184>
 7d2:	f5 01       	movw	r30, r10
 7d4:	37 fc       	sbrc	r3, 7
 7d6:	85 91       	lpm	r24, Z+
 7d8:	37 fe       	sbrs	r3, 7
 7da:	81 91       	ld	r24, Z+
 7dc:	5f 01       	movw	r10, r30
 7de:	b6 01       	movw	r22, r12
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	12 d1       	rcall	.+548    	; 0xa08 <fputc>
 7e4:	21 10       	cpse	r2, r1
 7e6:	2a 94       	dec	r2
 7e8:	21 e0       	ldi	r18, 0x01	; 1
 7ea:	82 1a       	sub	r8, r18
 7ec:	91 08       	sbc	r9, r1
 7ee:	81 14       	cp	r8, r1
 7f0:	91 04       	cpc	r9, r1
 7f2:	79 f7       	brne	.-34     	; 0x7d2 <vfprintf+0x19a>
 7f4:	e1 c0       	rjmp	.+450    	; 0x9b8 <__stack+0xb9>
 7f6:	84 36       	cpi	r24, 0x64	; 100
 7f8:	11 f0       	breq	.+4      	; 0x7fe <vfprintf+0x1c6>
 7fa:	89 36       	cpi	r24, 0x69	; 105
 7fc:	39 f5       	brne	.+78     	; 0x84c <vfprintf+0x214>
 7fe:	f8 01       	movw	r30, r16
 800:	37 fe       	sbrs	r3, 7
 802:	07 c0       	rjmp	.+14     	; 0x812 <vfprintf+0x1da>
 804:	60 81       	ld	r22, Z
 806:	71 81       	ldd	r23, Z+1	; 0x01
 808:	82 81       	ldd	r24, Z+2	; 0x02
 80a:	93 81       	ldd	r25, Z+3	; 0x03
 80c:	0c 5f       	subi	r16, 0xFC	; 252
 80e:	1f 4f       	sbci	r17, 0xFF	; 255
 810:	08 c0       	rjmp	.+16     	; 0x822 <vfprintf+0x1ea>
 812:	60 81       	ld	r22, Z
 814:	71 81       	ldd	r23, Z+1	; 0x01
 816:	07 2e       	mov	r0, r23
 818:	00 0c       	add	r0, r0
 81a:	88 0b       	sbc	r24, r24
 81c:	99 0b       	sbc	r25, r25
 81e:	0e 5f       	subi	r16, 0xFE	; 254
 820:	1f 4f       	sbci	r17, 0xFF	; 255
 822:	f3 2d       	mov	r31, r3
 824:	ff 76       	andi	r31, 0x6F	; 111
 826:	3f 2e       	mov	r3, r31
 828:	97 ff       	sbrs	r25, 7
 82a:	09 c0       	rjmp	.+18     	; 0x83e <vfprintf+0x206>
 82c:	90 95       	com	r25
 82e:	80 95       	com	r24
 830:	70 95       	com	r23
 832:	61 95       	neg	r22
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	8f 4f       	sbci	r24, 0xFF	; 255
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	f0 68       	ori	r31, 0x80	; 128
 83c:	3f 2e       	mov	r3, r31
 83e:	2a e0       	ldi	r18, 0x0A	; 10
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	a3 01       	movw	r20, r6
 844:	1d d1       	rcall	.+570    	; 0xa80 <__ultoa_invert>
 846:	88 2e       	mov	r8, r24
 848:	86 18       	sub	r8, r6
 84a:	44 c0       	rjmp	.+136    	; 0x8d4 <vfprintf+0x29c>
 84c:	85 37       	cpi	r24, 0x75	; 117
 84e:	31 f4       	brne	.+12     	; 0x85c <vfprintf+0x224>
 850:	23 2d       	mov	r18, r3
 852:	2f 7e       	andi	r18, 0xEF	; 239
 854:	b2 2e       	mov	r11, r18
 856:	2a e0       	ldi	r18, 0x0A	; 10
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	25 c0       	rjmp	.+74     	; 0x8a6 <vfprintf+0x26e>
 85c:	93 2d       	mov	r25, r3
 85e:	99 7f       	andi	r25, 0xF9	; 249
 860:	b9 2e       	mov	r11, r25
 862:	8f 36       	cpi	r24, 0x6F	; 111
 864:	c1 f0       	breq	.+48     	; 0x896 <vfprintf+0x25e>
 866:	18 f4       	brcc	.+6      	; 0x86e <vfprintf+0x236>
 868:	88 35       	cpi	r24, 0x58	; 88
 86a:	79 f0       	breq	.+30     	; 0x88a <vfprintf+0x252>
 86c:	ae c0       	rjmp	.+348    	; 0x9ca <__stack+0xcb>
 86e:	80 37       	cpi	r24, 0x70	; 112
 870:	19 f0       	breq	.+6      	; 0x878 <vfprintf+0x240>
 872:	88 37       	cpi	r24, 0x78	; 120
 874:	21 f0       	breq	.+8      	; 0x87e <vfprintf+0x246>
 876:	a9 c0       	rjmp	.+338    	; 0x9ca <__stack+0xcb>
 878:	e9 2f       	mov	r30, r25
 87a:	e0 61       	ori	r30, 0x10	; 16
 87c:	be 2e       	mov	r11, r30
 87e:	b4 fe       	sbrs	r11, 4
 880:	0d c0       	rjmp	.+26     	; 0x89c <vfprintf+0x264>
 882:	fb 2d       	mov	r31, r11
 884:	f4 60       	ori	r31, 0x04	; 4
 886:	bf 2e       	mov	r11, r31
 888:	09 c0       	rjmp	.+18     	; 0x89c <vfprintf+0x264>
 88a:	34 fe       	sbrs	r3, 4
 88c:	0a c0       	rjmp	.+20     	; 0x8a2 <vfprintf+0x26a>
 88e:	29 2f       	mov	r18, r25
 890:	26 60       	ori	r18, 0x06	; 6
 892:	b2 2e       	mov	r11, r18
 894:	06 c0       	rjmp	.+12     	; 0x8a2 <vfprintf+0x26a>
 896:	28 e0       	ldi	r18, 0x08	; 8
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	05 c0       	rjmp	.+10     	; 0x8a6 <vfprintf+0x26e>
 89c:	20 e1       	ldi	r18, 0x10	; 16
 89e:	30 e0       	ldi	r19, 0x00	; 0
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <vfprintf+0x26e>
 8a2:	20 e1       	ldi	r18, 0x10	; 16
 8a4:	32 e0       	ldi	r19, 0x02	; 2
 8a6:	f8 01       	movw	r30, r16
 8a8:	b7 fe       	sbrs	r11, 7
 8aa:	07 c0       	rjmp	.+14     	; 0x8ba <vfprintf+0x282>
 8ac:	60 81       	ld	r22, Z
 8ae:	71 81       	ldd	r23, Z+1	; 0x01
 8b0:	82 81       	ldd	r24, Z+2	; 0x02
 8b2:	93 81       	ldd	r25, Z+3	; 0x03
 8b4:	0c 5f       	subi	r16, 0xFC	; 252
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	06 c0       	rjmp	.+12     	; 0x8c6 <vfprintf+0x28e>
 8ba:	60 81       	ld	r22, Z
 8bc:	71 81       	ldd	r23, Z+1	; 0x01
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	0e 5f       	subi	r16, 0xFE	; 254
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	a3 01       	movw	r20, r6
 8c8:	db d0       	rcall	.+438    	; 0xa80 <__ultoa_invert>
 8ca:	88 2e       	mov	r8, r24
 8cc:	86 18       	sub	r8, r6
 8ce:	fb 2d       	mov	r31, r11
 8d0:	ff 77       	andi	r31, 0x7F	; 127
 8d2:	3f 2e       	mov	r3, r31
 8d4:	36 fe       	sbrs	r3, 6
 8d6:	0d c0       	rjmp	.+26     	; 0x8f2 <vfprintf+0x2ba>
 8d8:	23 2d       	mov	r18, r3
 8da:	2e 7f       	andi	r18, 0xFE	; 254
 8dc:	a2 2e       	mov	r10, r18
 8de:	89 14       	cp	r8, r9
 8e0:	58 f4       	brcc	.+22     	; 0x8f8 <vfprintf+0x2c0>
 8e2:	34 fe       	sbrs	r3, 4
 8e4:	0b c0       	rjmp	.+22     	; 0x8fc <vfprintf+0x2c4>
 8e6:	32 fc       	sbrc	r3, 2
 8e8:	09 c0       	rjmp	.+18     	; 0x8fc <vfprintf+0x2c4>
 8ea:	83 2d       	mov	r24, r3
 8ec:	8e 7e       	andi	r24, 0xEE	; 238
 8ee:	a8 2e       	mov	r10, r24
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <vfprintf+0x2c4>
 8f2:	b8 2c       	mov	r11, r8
 8f4:	a3 2c       	mov	r10, r3
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x2c6>
 8f8:	b8 2c       	mov	r11, r8
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <vfprintf+0x2c6>
 8fc:	b9 2c       	mov	r11, r9
 8fe:	a4 fe       	sbrs	r10, 4
 900:	0f c0       	rjmp	.+30     	; 0x920 <__stack+0x21>
 902:	fe 01       	movw	r30, r28
 904:	e8 0d       	add	r30, r8
 906:	f1 1d       	adc	r31, r1
 908:	80 81       	ld	r24, Z
 90a:	80 33       	cpi	r24, 0x30	; 48
 90c:	21 f4       	brne	.+8      	; 0x916 <__stack+0x17>
 90e:	9a 2d       	mov	r25, r10
 910:	99 7e       	andi	r25, 0xE9	; 233
 912:	a9 2e       	mov	r10, r25
 914:	09 c0       	rjmp	.+18     	; 0x928 <__stack+0x29>
 916:	a2 fe       	sbrs	r10, 2
 918:	06 c0       	rjmp	.+12     	; 0x926 <__stack+0x27>
 91a:	b3 94       	inc	r11
 91c:	b3 94       	inc	r11
 91e:	04 c0       	rjmp	.+8      	; 0x928 <__stack+0x29>
 920:	8a 2d       	mov	r24, r10
 922:	86 78       	andi	r24, 0x86	; 134
 924:	09 f0       	breq	.+2      	; 0x928 <__stack+0x29>
 926:	b3 94       	inc	r11
 928:	a3 fc       	sbrc	r10, 3
 92a:	10 c0       	rjmp	.+32     	; 0x94c <__stack+0x4d>
 92c:	a0 fe       	sbrs	r10, 0
 92e:	06 c0       	rjmp	.+12     	; 0x93c <__stack+0x3d>
 930:	b2 14       	cp	r11, r2
 932:	80 f4       	brcc	.+32     	; 0x954 <__stack+0x55>
 934:	28 0c       	add	r2, r8
 936:	92 2c       	mov	r9, r2
 938:	9b 18       	sub	r9, r11
 93a:	0d c0       	rjmp	.+26     	; 0x956 <__stack+0x57>
 93c:	b2 14       	cp	r11, r2
 93e:	58 f4       	brcc	.+22     	; 0x956 <__stack+0x57>
 940:	b6 01       	movw	r22, r12
 942:	80 e2       	ldi	r24, 0x20	; 32
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	60 d0       	rcall	.+192    	; 0xa08 <fputc>
 948:	b3 94       	inc	r11
 94a:	f8 cf       	rjmp	.-16     	; 0x93c <__stack+0x3d>
 94c:	b2 14       	cp	r11, r2
 94e:	18 f4       	brcc	.+6      	; 0x956 <__stack+0x57>
 950:	2b 18       	sub	r2, r11
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0x59>
 954:	98 2c       	mov	r9, r8
 956:	21 2c       	mov	r2, r1
 958:	a4 fe       	sbrs	r10, 4
 95a:	0f c0       	rjmp	.+30     	; 0x97a <__stack+0x7b>
 95c:	b6 01       	movw	r22, r12
 95e:	80 e3       	ldi	r24, 0x30	; 48
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	52 d0       	rcall	.+164    	; 0xa08 <fputc>
 964:	a2 fe       	sbrs	r10, 2
 966:	16 c0       	rjmp	.+44     	; 0x994 <__stack+0x95>
 968:	a1 fc       	sbrc	r10, 1
 96a:	03 c0       	rjmp	.+6      	; 0x972 <__stack+0x73>
 96c:	88 e7       	ldi	r24, 0x78	; 120
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
 972:	88 e5       	ldi	r24, 0x58	; 88
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	b6 01       	movw	r22, r12
 978:	0c c0       	rjmp	.+24     	; 0x992 <__stack+0x93>
 97a:	8a 2d       	mov	r24, r10
 97c:	86 78       	andi	r24, 0x86	; 134
 97e:	51 f0       	breq	.+20     	; 0x994 <__stack+0x95>
 980:	a1 fe       	sbrs	r10, 1
 982:	02 c0       	rjmp	.+4      	; 0x988 <__stack+0x89>
 984:	8b e2       	ldi	r24, 0x2B	; 43
 986:	01 c0       	rjmp	.+2      	; 0x98a <__stack+0x8b>
 988:	80 e2       	ldi	r24, 0x20	; 32
 98a:	a7 fc       	sbrc	r10, 7
 98c:	8d e2       	ldi	r24, 0x2D	; 45
 98e:	b6 01       	movw	r22, r12
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	3a d0       	rcall	.+116    	; 0xa08 <fputc>
 994:	89 14       	cp	r8, r9
 996:	30 f4       	brcc	.+12     	; 0x9a4 <__stack+0xa5>
 998:	b6 01       	movw	r22, r12
 99a:	80 e3       	ldi	r24, 0x30	; 48
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	34 d0       	rcall	.+104    	; 0xa08 <fputc>
 9a0:	9a 94       	dec	r9
 9a2:	f8 cf       	rjmp	.-16     	; 0x994 <__stack+0x95>
 9a4:	8a 94       	dec	r8
 9a6:	f3 01       	movw	r30, r6
 9a8:	e8 0d       	add	r30, r8
 9aa:	f1 1d       	adc	r31, r1
 9ac:	80 81       	ld	r24, Z
 9ae:	b6 01       	movw	r22, r12
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	2a d0       	rcall	.+84     	; 0xa08 <fputc>
 9b4:	81 10       	cpse	r8, r1
 9b6:	f6 cf       	rjmp	.-20     	; 0x9a4 <__stack+0xa5>
 9b8:	22 20       	and	r2, r2
 9ba:	09 f4       	brne	.+2      	; 0x9be <__stack+0xbf>
 9bc:	4e ce       	rjmp	.-868    	; 0x65a <vfprintf+0x22>
 9be:	b6 01       	movw	r22, r12
 9c0:	80 e2       	ldi	r24, 0x20	; 32
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	21 d0       	rcall	.+66     	; 0xa08 <fputc>
 9c6:	2a 94       	dec	r2
 9c8:	f7 cf       	rjmp	.-18     	; 0x9b8 <__stack+0xb9>
 9ca:	f6 01       	movw	r30, r12
 9cc:	86 81       	ldd	r24, Z+6	; 0x06
 9ce:	97 81       	ldd	r25, Z+7	; 0x07
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0xd7>
 9d2:	8f ef       	ldi	r24, 0xFF	; 255
 9d4:	9f ef       	ldi	r25, 0xFF	; 255
 9d6:	2b 96       	adiw	r28, 0x0b	; 11
 9d8:	e2 e1       	ldi	r30, 0x12	; 18
 9da:	cc c0       	rjmp	.+408    	; 0xb74 <__epilogue_restores__>

000009dc <strnlen_P>:
 9dc:	fc 01       	movw	r30, r24
 9de:	05 90       	lpm	r0, Z+
 9e0:	61 50       	subi	r22, 0x01	; 1
 9e2:	70 40       	sbci	r23, 0x00	; 0
 9e4:	01 10       	cpse	r0, r1
 9e6:	d8 f7       	brcc	.-10     	; 0x9de <strnlen_P+0x2>
 9e8:	80 95       	com	r24
 9ea:	90 95       	com	r25
 9ec:	8e 0f       	add	r24, r30
 9ee:	9f 1f       	adc	r25, r31
 9f0:	08 95       	ret

000009f2 <strnlen>:
 9f2:	fc 01       	movw	r30, r24
 9f4:	61 50       	subi	r22, 0x01	; 1
 9f6:	70 40       	sbci	r23, 0x00	; 0
 9f8:	01 90       	ld	r0, Z+
 9fa:	01 10       	cpse	r0, r1
 9fc:	d8 f7       	brcc	.-10     	; 0x9f4 <strnlen+0x2>
 9fe:	80 95       	com	r24
 a00:	90 95       	com	r25
 a02:	8e 0f       	add	r24, r30
 a04:	9f 1f       	adc	r25, r31
 a06:	08 95       	ret

00000a08 <fputc>:
 a08:	0f 93       	push	r16
 a0a:	1f 93       	push	r17
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	fb 01       	movw	r30, r22
 a12:	23 81       	ldd	r18, Z+3	; 0x03
 a14:	21 fd       	sbrc	r18, 1
 a16:	03 c0       	rjmp	.+6      	; 0xa1e <fputc+0x16>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	2c c0       	rjmp	.+88     	; 0xa76 <fputc+0x6e>
 a1e:	22 ff       	sbrs	r18, 2
 a20:	16 c0       	rjmp	.+44     	; 0xa4e <fputc+0x46>
 a22:	46 81       	ldd	r20, Z+6	; 0x06
 a24:	57 81       	ldd	r21, Z+7	; 0x07
 a26:	24 81       	ldd	r18, Z+4	; 0x04
 a28:	35 81       	ldd	r19, Z+5	; 0x05
 a2a:	42 17       	cp	r20, r18
 a2c:	53 07       	cpc	r21, r19
 a2e:	44 f4       	brge	.+16     	; 0xa40 <fputc+0x38>
 a30:	a0 81       	ld	r26, Z
 a32:	b1 81       	ldd	r27, Z+1	; 0x01
 a34:	9d 01       	movw	r18, r26
 a36:	2f 5f       	subi	r18, 0xFF	; 255
 a38:	3f 4f       	sbci	r19, 0xFF	; 255
 a3a:	31 83       	std	Z+1, r19	; 0x01
 a3c:	20 83       	st	Z, r18
 a3e:	8c 93       	st	X, r24
 a40:	26 81       	ldd	r18, Z+6	; 0x06
 a42:	37 81       	ldd	r19, Z+7	; 0x07
 a44:	2f 5f       	subi	r18, 0xFF	; 255
 a46:	3f 4f       	sbci	r19, 0xFF	; 255
 a48:	37 83       	std	Z+7, r19	; 0x07
 a4a:	26 83       	std	Z+6, r18	; 0x06
 a4c:	14 c0       	rjmp	.+40     	; 0xa76 <fputc+0x6e>
 a4e:	8b 01       	movw	r16, r22
 a50:	ec 01       	movw	r28, r24
 a52:	fb 01       	movw	r30, r22
 a54:	00 84       	ldd	r0, Z+8	; 0x08
 a56:	f1 85       	ldd	r31, Z+9	; 0x09
 a58:	e0 2d       	mov	r30, r0
 a5a:	09 95       	icall
 a5c:	89 2b       	or	r24, r25
 a5e:	e1 f6       	brne	.-72     	; 0xa18 <fputc+0x10>
 a60:	d8 01       	movw	r26, r16
 a62:	16 96       	adiw	r26, 0x06	; 6
 a64:	8d 91       	ld	r24, X+
 a66:	9c 91       	ld	r25, X
 a68:	17 97       	sbiw	r26, 0x07	; 7
 a6a:	01 96       	adiw	r24, 0x01	; 1
 a6c:	17 96       	adiw	r26, 0x07	; 7
 a6e:	9c 93       	st	X, r25
 a70:	8e 93       	st	-X, r24
 a72:	16 97       	sbiw	r26, 0x06	; 6
 a74:	ce 01       	movw	r24, r28
 a76:	df 91       	pop	r29
 a78:	cf 91       	pop	r28
 a7a:	1f 91       	pop	r17
 a7c:	0f 91       	pop	r16
 a7e:	08 95       	ret

00000a80 <__ultoa_invert>:
 a80:	fa 01       	movw	r30, r20
 a82:	aa 27       	eor	r26, r26
 a84:	28 30       	cpi	r18, 0x08	; 8
 a86:	51 f1       	breq	.+84     	; 0xadc <__ultoa_invert+0x5c>
 a88:	20 31       	cpi	r18, 0x10	; 16
 a8a:	81 f1       	breq	.+96     	; 0xaec <__ultoa_invert+0x6c>
 a8c:	e8 94       	clt
 a8e:	6f 93       	push	r22
 a90:	6e 7f       	andi	r22, 0xFE	; 254
 a92:	6e 5f       	subi	r22, 0xFE	; 254
 a94:	7f 4f       	sbci	r23, 0xFF	; 255
 a96:	8f 4f       	sbci	r24, 0xFF	; 255
 a98:	9f 4f       	sbci	r25, 0xFF	; 255
 a9a:	af 4f       	sbci	r26, 0xFF	; 255
 a9c:	b1 e0       	ldi	r27, 0x01	; 1
 a9e:	3e d0       	rcall	.+124    	; 0xb1c <__ultoa_invert+0x9c>
 aa0:	b4 e0       	ldi	r27, 0x04	; 4
 aa2:	3c d0       	rcall	.+120    	; 0xb1c <__ultoa_invert+0x9c>
 aa4:	67 0f       	add	r22, r23
 aa6:	78 1f       	adc	r23, r24
 aa8:	89 1f       	adc	r24, r25
 aaa:	9a 1f       	adc	r25, r26
 aac:	a1 1d       	adc	r26, r1
 aae:	68 0f       	add	r22, r24
 ab0:	79 1f       	adc	r23, r25
 ab2:	8a 1f       	adc	r24, r26
 ab4:	91 1d       	adc	r25, r1
 ab6:	a1 1d       	adc	r26, r1
 ab8:	6a 0f       	add	r22, r26
 aba:	71 1d       	adc	r23, r1
 abc:	81 1d       	adc	r24, r1
 abe:	91 1d       	adc	r25, r1
 ac0:	a1 1d       	adc	r26, r1
 ac2:	20 d0       	rcall	.+64     	; 0xb04 <__ultoa_invert+0x84>
 ac4:	09 f4       	brne	.+2      	; 0xac8 <__ultoa_invert+0x48>
 ac6:	68 94       	set
 ac8:	3f 91       	pop	r19
 aca:	2a e0       	ldi	r18, 0x0A	; 10
 acc:	26 9f       	mul	r18, r22
 ace:	11 24       	eor	r1, r1
 ad0:	30 19       	sub	r19, r0
 ad2:	30 5d       	subi	r19, 0xD0	; 208
 ad4:	31 93       	st	Z+, r19
 ad6:	de f6       	brtc	.-74     	; 0xa8e <__ultoa_invert+0xe>
 ad8:	cf 01       	movw	r24, r30
 ada:	08 95       	ret
 adc:	46 2f       	mov	r20, r22
 ade:	47 70       	andi	r20, 0x07	; 7
 ae0:	40 5d       	subi	r20, 0xD0	; 208
 ae2:	41 93       	st	Z+, r20
 ae4:	b3 e0       	ldi	r27, 0x03	; 3
 ae6:	0f d0       	rcall	.+30     	; 0xb06 <__ultoa_invert+0x86>
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__ultoa_invert+0x5c>
 aea:	f6 cf       	rjmp	.-20     	; 0xad8 <__ultoa_invert+0x58>
 aec:	46 2f       	mov	r20, r22
 aee:	4f 70       	andi	r20, 0x0F	; 15
 af0:	40 5d       	subi	r20, 0xD0	; 208
 af2:	4a 33       	cpi	r20, 0x3A	; 58
 af4:	18 f0       	brcs	.+6      	; 0xafc <__ultoa_invert+0x7c>
 af6:	49 5d       	subi	r20, 0xD9	; 217
 af8:	31 fd       	sbrc	r19, 1
 afa:	40 52       	subi	r20, 0x20	; 32
 afc:	41 93       	st	Z+, r20
 afe:	02 d0       	rcall	.+4      	; 0xb04 <__ultoa_invert+0x84>
 b00:	a9 f7       	brne	.-22     	; 0xaec <__ultoa_invert+0x6c>
 b02:	ea cf       	rjmp	.-44     	; 0xad8 <__ultoa_invert+0x58>
 b04:	b4 e0       	ldi	r27, 0x04	; 4
 b06:	a6 95       	lsr	r26
 b08:	97 95       	ror	r25
 b0a:	87 95       	ror	r24
 b0c:	77 95       	ror	r23
 b0e:	67 95       	ror	r22
 b10:	ba 95       	dec	r27
 b12:	c9 f7       	brne	.-14     	; 0xb06 <__ultoa_invert+0x86>
 b14:	00 97       	sbiw	r24, 0x00	; 0
 b16:	61 05       	cpc	r22, r1
 b18:	71 05       	cpc	r23, r1
 b1a:	08 95       	ret
 b1c:	9b 01       	movw	r18, r22
 b1e:	ac 01       	movw	r20, r24
 b20:	0a 2e       	mov	r0, r26
 b22:	06 94       	lsr	r0
 b24:	57 95       	ror	r21
 b26:	47 95       	ror	r20
 b28:	37 95       	ror	r19
 b2a:	27 95       	ror	r18
 b2c:	ba 95       	dec	r27
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__ultoa_invert+0xa2>
 b30:	62 0f       	add	r22, r18
 b32:	73 1f       	adc	r23, r19
 b34:	84 1f       	adc	r24, r20
 b36:	95 1f       	adc	r25, r21
 b38:	a0 1d       	adc	r26, r0
 b3a:	08 95       	ret

00000b3c <__prologue_saves__>:
 b3c:	2f 92       	push	r2
 b3e:	3f 92       	push	r3
 b40:	4f 92       	push	r4
 b42:	5f 92       	push	r5
 b44:	6f 92       	push	r6
 b46:	7f 92       	push	r7
 b48:	8f 92       	push	r8
 b4a:	9f 92       	push	r9
 b4c:	af 92       	push	r10
 b4e:	bf 92       	push	r11
 b50:	cf 92       	push	r12
 b52:	df 92       	push	r13
 b54:	ef 92       	push	r14
 b56:	ff 92       	push	r15
 b58:	0f 93       	push	r16
 b5a:	1f 93       	push	r17
 b5c:	cf 93       	push	r28
 b5e:	df 93       	push	r29
 b60:	cd b7       	in	r28, 0x3d	; 61
 b62:	de b7       	in	r29, 0x3e	; 62
 b64:	ca 1b       	sub	r28, r26
 b66:	db 0b       	sbc	r29, r27
 b68:	0f b6       	in	r0, 0x3f	; 63
 b6a:	f8 94       	cli
 b6c:	de bf       	out	0x3e, r29	; 62
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	cd bf       	out	0x3d, r28	; 61
 b72:	09 94       	ijmp

00000b74 <__epilogue_restores__>:
 b74:	2a 88       	ldd	r2, Y+18	; 0x12
 b76:	39 88       	ldd	r3, Y+17	; 0x11
 b78:	48 88       	ldd	r4, Y+16	; 0x10
 b7a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b7c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b7e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b80:	8c 84       	ldd	r8, Y+12	; 0x0c
 b82:	9b 84       	ldd	r9, Y+11	; 0x0b
 b84:	aa 84       	ldd	r10, Y+10	; 0x0a
 b86:	b9 84       	ldd	r11, Y+9	; 0x09
 b88:	c8 84       	ldd	r12, Y+8	; 0x08
 b8a:	df 80       	ldd	r13, Y+7	; 0x07
 b8c:	ee 80       	ldd	r14, Y+6	; 0x06
 b8e:	fd 80       	ldd	r15, Y+5	; 0x05
 b90:	0c 81       	ldd	r16, Y+4	; 0x04
 b92:	1b 81       	ldd	r17, Y+3	; 0x03
 b94:	aa 81       	ldd	r26, Y+2	; 0x02
 b96:	b9 81       	ldd	r27, Y+1	; 0x01
 b98:	ce 0f       	add	r28, r30
 b9a:	d1 1d       	adc	r29, r1
 b9c:	0f b6       	in	r0, 0x3f	; 63
 b9e:	f8 94       	cli
 ba0:	de bf       	out	0x3e, r29	; 62
 ba2:	0f be       	out	0x3f, r0	; 63
 ba4:	cd bf       	out	0x3d, r28	; 61
 ba6:	ed 01       	movw	r28, r26
 ba8:	08 95       	ret

00000baa <_exit>:
 baa:	f8 94       	cli

00000bac <__stop_program>:
 bac:	ff cf       	rjmp	.-2      	; 0xbac <__stop_program>
