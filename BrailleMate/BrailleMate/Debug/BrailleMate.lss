
BrailleMate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  0000038a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eb8  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c9  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c4d  00000000  00000000  00001ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00002b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007d72  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000560  00000000  00000000  0000aa32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000af92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000032f3  00000000  00000000  0000b042  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	25 c1       	rjmp	.+586    	; 0x27c <__vector_12>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	f4 c0       	rjmp	.+488    	; 0x23e <__vector_21>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3e       	cpi	r26, 0xEC	; 236
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac ee       	ldi	r26, 0xEC	; 236
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3e       	cpi	r26, 0xEC	; 236
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	4b d0       	rcall	.+150    	; 0x132 <main>
  9c:	74 c1       	rjmp	.+744    	; 0x386 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <ADC_Init>:


void ADC_Init(void)
{
	/*Select Vref = AVcc*/
	ADMUX |= (1 << REFS0);
  a0:	ec e7       	ldi	r30, 0x7C	; 124
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	80 83       	st	Z, r24
	/*Trigger conversion on Timer0 compare match A*/
	ADCSRB |= (1 << ADTS0) | (1 << ADTS2);
  aa:	eb e7       	ldi	r30, 0x7B	; 123
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	85 60       	ori	r24, 0x05	; 5
  b2:	80 83       	st	Z, r24
	/*Enable ADC conversion, auto trigger and interrupt generate */
	ADCSRA |= (1 << ADEN) | (1 << ADATE) | (1 << ADIE);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 6a       	ori	r24, 0xA8	; 168
  bc:	80 83       	st	Z, r24
	/*start ADC cpnversion*/
	ADCSRA |= (1 << ADSC);
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <Buzzer_PWMInit>:
	
}

void Buzzer_PWMInit(void)
{
    DDRB |= (1 << PB3);
  c6:	23 9a       	sbi	0x04, 3	; 4
    /*Set to CTC mode and toggle OC0A for every output compare match*/
    TCCR2A |= (1 << WGM20) | (1 << COM2A0);
  c8:	e0 eb       	ldi	r30, 0xB0	; 176
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 64       	ori	r24, 0x41	; 65
  d0:	80 83       	st	Z, r24
    /*Set Prescaler Value for TIMER0 to 256*/
    TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << WGM22);
  d2:	e1 eb       	ldi	r30, 0xB1	; 177
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8e 60       	ori	r24, 0x0E	; 14
  da:	80 83       	st	Z, r24
  dc:	08 95       	ret

000000de <TimerInit>:
}

void TimerInit(void)
{
	//Enable prescaling for clock source
	CLKPR |= (1 << CLKPCE);
  de:	e1 e6       	ldi	r30, 0x61	; 97
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 68       	ori	r24, 0x80	; 128
  e6:	80 83       	st	Z, r24
	/*CTC mode*/
	//Setting 16-bit control register:Prescaling = 1024 for input compare register
	TCCR1B |= (1 << CS12);// | (1<<CS10);//|(1 << WGM12);
  e8:	e1 e8       	ldi	r30, 0x81	; 129
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	84 60       	ori	r24, 0x04	; 4
  f0:	80 83       	st	Z, r24
	/*Hit and trial value for tick tick big enough*/
	OCR1B = 200;
  f2:	88 ec       	ldi	r24, 0xC8	; 200
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
  fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
	//Enable output compare interrupt for output compare B
	TIMSK1 |= (1<< OCIE1B);
  fe:	ef e6       	ldi	r30, 0x6F	; 111
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <Initialize>:

/***************************Function Definitions*****************************/
void Initialize(void)
{
    //disable interrupt
	cli();
 10a:	f8 94       	cli
	UART_init();
 10c:	20 d1       	rcall	.+576    	; 0x34e <UART_init>
	DDRD |= (1<<PORTD2) | (1<<PORTD3) | (1<<PORTD4) | (1<<PORTD5) | (1<<PORTD6) | (1<<PORTD7);
 10e:	8a b1       	in	r24, 0x0a	; 10
 110:	8c 6f       	ori	r24, 0xFC	; 252
	TimerInit();
 112:	8a b9       	out	0x0a, r24	; 10
	ADC_Init();
 114:	e4 df       	rcall	.-56     	; 0xde <TimerInit>
	Buzzer_PWMInit();
 116:	c4 df       	rcall	.-120    	; 0xa0 <ADC_Init>
 118:	d6 df       	rcall	.-84     	; 0xc6 <Buzzer_PWMInit>
	speaker_begin();
 11a:	0a d1       	rcall	.+532    	; 0x330 <speaker_begin>
 11c:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	83 ed       	ldi	r24, 0xD3	; 211
 120:	90 e3       	ldi	r25, 0x30	; 48
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <Initialize+0x18>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <Initialize+0x22>
 12c:	00 00       	nop
 12e:	78 94       	sei
	_delay_ms(1000);
	sei();
 130:	08 95       	ret

00000132 <main>:
 132:	eb df       	rcall	.-42     	; 0x10a <Initialize>

int main(void)
{
    Initialize();
	char ChSel = 0;
	char ChCount = 0;
 134:	f1 2c       	mov	r15, r1


int main(void)
{
    Initialize();
	char ChSel = 0;
 136:	20 e0       	ldi	r18, 0x00	; 0
		}
		if((400 < adc_read) && (adc_read < 600))
		{
			if(ChSel)
			{
				ChSel = 0;
 138:	d1 2c       	mov	r13, r1
				ChSel = 1;
				//sprintf(String,"Character sel started\n");
				//UART_SendData(String);
			}
		}
		if((400 < adc_read) && (adc_read < 600))
 13a:	ee 24       	eor	r14, r14
 13c:	e3 94       	inc	r14
	while (1) // loop forever
	{
		if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
		{
			offset = ((adc_read ) < 512)?-1:1;
			adc_read  = 1024 ;//max impossible value for adc
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d4 e0       	ldi	r29, 0x04	; 4
	
	while (1) // loop forever
	{
		if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
		{
			offset = ((adc_read ) < 512)?-1:1;
 142:	bb 24       	eor	r11, r11
 144:	ba 94       	dec	r11
				else
				{
					//sprintf(String,"Prev Character\n");
					//UART_SendData(String);
				}
				OCR2A = 70;
 146:	03 eb       	ldi	r16, 0xB3	; 179
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	0f 2e       	mov	r0, r31
 14c:	f6 e4       	ldi	r31, 0x46	; 70
 14e:	cf 2e       	mov	r12, r31
 150:	f0 2d       	mov	r31, r0
	char ChCount = 0;
	int16_t offset = 0;
	
	while (1) // loop forever
	{
		if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15a:	ac 01       	movw	r20, r24
 15c:	49 55       	subi	r20, 0x59	; 89
 15e:	52 40       	sbci	r21, 0x02	; 2
 160:	47 3a       	cpi	r20, 0xA7	; 167
 162:	51 40       	sbci	r21, 0x01	; 1
 164:	20 f0       	brcs	.+8      	; 0x16e <main+0x3c>
 166:	80 39       	cpi	r24, 0x90	; 144
 168:	e1 e0       	ldi	r30, 0x01	; 1
 16a:	9e 07       	cpc	r25, r30
 16c:	40 f5       	brcc	.+80     	; 0x1be <main+0x8c>
		{
			offset = ((adc_read ) < 512)?-1:1;
 16e:	81 15       	cp	r24, r1
 170:	92 40       	sbci	r25, 0x02	; 2
 172:	08 f4       	brcc	.+2      	; 0x176 <main+0x44>
 174:	54 c0       	rjmp	.+168    	; 0x21e <main+0xec>
 176:	5a c0       	rjmp	.+180    	; 0x22c <main+0xfa>
			adc_read  = 1024 ;//max impossible value for adc
			if(ChSel == 1)
			{
				//print
				if((offset < 0) && (ChCount == 0))
 178:	f1 10       	cpse	r15, r1
 17a:	05 c0       	rjmp	.+10     	; 0x186 <main+0x54>
	
	while (1) // loop forever
	{
		if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
		{
			offset = ((adc_read ) < 512)?-1:1;
 17c:	8b 2d       	mov	r24, r11
			if(ChSel == 1)
			{
				//print
				if((offset < 0) && (ChCount == 0))
				{
					ChCount = 64;
 17e:	68 94       	set
 180:	ff 24       	eor	r15, r15
 182:	f6 f8       	bld	r15, 6
 184:	03 c0       	rjmp	.+6      	; 0x18c <main+0x5a>
	
	while (1) // loop forever
	{
		if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
		{
			offset = ((adc_read ) < 512)?-1:1;
 186:	8b 2d       	mov	r24, r11
 188:	01 c0       	rjmp	.+2      	; 0x18c <main+0x5a>
 18a:	8e 2d       	mov	r24, r14
				//print
				if((offset < 0) && (ChCount == 0))
				{
					ChCount = 64;
				}
				ChCount += offset; 
 18c:	f8 0e       	add	r15, r24
				else
				{
					//sprintf(String,"Prev Character\n");
					//UART_SendData(String);
				}
				OCR2A = 70;
 18e:	f8 01       	movw	r30, r16
 190:	c0 82       	st	Z, r12
 192:	ff ef       	ldi	r31, 0xFF	; 255
 194:	29 e6       	ldi	r18, 0x69	; 105
 196:	38 e1       	ldi	r19, 0x18	; 24
 198:	f1 50       	subi	r31, 0x01	; 1
 19a:	20 40       	sbci	r18, 0x00	; 0
 19c:	30 40       	sbci	r19, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x66>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x70>
 1a2:	00 00       	nop
				_delay_ms(500);
				OCR2A = 0;
 1a4:	f8 01       	movw	r30, r16
 1a6:	10 82       	st	Z, r1
				ChSel = 1;
				//sprintf(String,"Character sel started\n");
				//UART_SendData(String);
			}
		}
		if((400 < adc_read) && (adc_read < 600))
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1b0:	81 59       	subi	r24, 0x91	; 145
 1b2:	91 40       	sbci	r25, 0x01	; 1
 1b4:	87 3c       	cpi	r24, 0xC7	; 199
 1b6:	91 05       	cpc	r25, r1
 1b8:	70 f0       	brcs	.+28     	; 0x1d6 <main+0xa4>
 1ba:	2e 2d       	mov	r18, r14
 1bc:	ca cf       	rjmp	.-108    	; 0x152 <main+0x20>
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c6:	81 59       	subi	r24, 0x91	; 145
 1c8:	91 40       	sbci	r25, 0x01	; 1
 1ca:	87 3c       	cpi	r24, 0xC7	; 199
 1cc:	91 05       	cpc	r25, r1
 1ce:	08 f6       	brcc	.-126    	; 0x152 <main+0x20>
		{
			if(ChSel)
 1d0:	22 23       	and	r18, r18
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <main+0xa4>
 1d4:	be cf       	rjmp	.-132    	; 0x152 <main+0x20>
			{
				ChSel = 0;
				ChCount = ChCount%64;
 1d6:	8f 2d       	mov	r24, r15
 1d8:	8f 7b       	andi	r24, 0xBF	; 191
 1da:	1c f4       	brge	.+6      	; 0x1e2 <main+0xb0>
 1dc:	81 50       	subi	r24, 0x01	; 1
 1de:	80 6c       	ori	r24, 0xC0	; 192
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	f8 2e       	mov	r15, r24
				if(ChCount >= 12 && ChCount <= 16)
 1e4:	94 ef       	ldi	r25, 0xF4	; 244
 1e6:	98 0f       	add	r25, r24
 1e8:	95 30       	cpi	r25, 0x05	; 5
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <main+0xc0>
				{
					ChCount = (ChCount - 12) + 11;
 1ec:	ff 24       	eor	r15, r15
 1ee:	fa 94       	dec	r15
 1f0:	f8 0e       	add	r15, r24
				}
				//sprintf(String,"INPUT READ = %c ch count = %d\n",char_value[ChCount],ChCount);
				//UART_SendData(String);
				PORTD = char_lookup[ChCount];
 1f2:	8f 2d       	mov	r24, r15
 1f4:	0f 2c       	mov	r0, r15
 1f6:	00 0c       	add	r0, r0
 1f8:	99 0b       	sbc	r25, r25
 1fa:	fc 01       	movw	r30, r24
 1fc:	e5 59       	subi	r30, 0x95	; 149
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	20 81       	ld	r18, Z
 202:	2b b9       	out	0x0b, r18	; 11
				/*speaker play module*/
				speaker_play(speaker_lookup[char_value[ChCount] - ' ']);
 204:	fc 01       	movw	r30, r24
 206:	e5 55       	subi	r30, 0x55	; 85
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	e0 81       	ld	r30, Z
 20c:	0e 2e       	mov	r0, r30
 20e:	00 0c       	add	r0, r0
 210:	ff 0b       	sbc	r31, r31
 212:	e4 51       	subi	r30, 0x14	; 20
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	80 81       	ld	r24, Z
 218:	86 d0       	rcall	.+268    	; 0x326 <speaker_play>
		}
		if((400 < adc_read) && (adc_read < 600))
		{
			if(ChSel)
			{
				ChSel = 0;
 21a:	2d 2d       	mov	r18, r13
 21c:	9a cf       	rjmp	.-204    	; 0x152 <main+0x20>
	while (1) // loop forever
	{
		if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
		{
			offset = ((adc_read ) < 512)?-1:1;
			adc_read  = 1024 ;//max impossible value for adc
 21e:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 222:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
			if(ChSel == 1)
 226:	21 30       	cpi	r18, 0x01	; 1
 228:	41 f4       	brne	.+16     	; 0x23a <main+0x108>
 22a:	a6 cf       	rjmp	.-180    	; 0x178 <main+0x46>
	while (1) // loop forever
	{
		if(((600 < adc_read )  && (adc_read < 1024))|| (adc_read < 400))
		{
			offset = ((adc_read ) < 512)?-1:1;
			adc_read  = 1024 ;//max impossible value for adc
 22c:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
 230:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
			if(ChSel == 1)
 234:	21 30       	cpi	r18, 0x01	; 1
 236:	09 f4       	brne	.+2      	; 0x23a <main+0x108>
 238:	a8 cf       	rjmp	.-176    	; 0x18a <main+0x58>
				ChSel = 1;
				//sprintf(String,"Character sel started\n");
				//UART_SendData(String);
			}
		}
		if((400 < adc_read) && (adc_read < 600))
 23a:	2e 2d       	mov	r18, r14
 23c:	8a cf       	rjmp	.-236    	; 0x152 <main+0x20>

0000023e <__vector_21>:
	//Enable output compare interrupt for output compare B
	TIMSK1 |= (1<< OCIE1B);
}

ISR(ADC_vect)
{
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	2f 93       	push	r18
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
	adc_read = (unsigned char)ADCL;
 24e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 258:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	adc_read |= ((ADCH & 0x03)<<8);
 25c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 260:	23 70       	andi	r18, 0x03	; 3
 262:	92 2b       	or	r25, r18
 264:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 268:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	//sprintf(String,"ADC read triggered = %d\n",adc_read);
	//UART_SendData(String);
}
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
	
}
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <calculateCheckSum>:
  *array = (uint8_t)(value>>8);
  *(array+1) = (uint8_t)(value);
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
 290:	fc 01       	movw	r30, r24
 292:	31 96       	adiw	r30, 0x01	; 1
 294:	ac 01       	movw	r20, r24
 296:	49 5f       	subi	r20, 0xF9	; 249
 298:	5f 4f       	sbci	r21, 0xFF	; 255
  uint16_t sum = 0;
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
    sum += buffer[i];
 29e:	91 91       	ld	r25, Z+
 2a0:	29 0f       	add	r18, r25
 2a2:	31 1d       	adc	r19, r1
}

uint16_t calculateCheckSum(uint8_t *buffer)
{
  uint16_t sum = 0;
  for (int i=PKT_VERSION; i<PKT_CHECKSUM; i++) {
 2a4:	e4 17       	cp	r30, r20
 2a6:	f5 07       	cpc	r31, r21
 2a8:	d1 f7       	brne	.-12     	; 0x29e <calculateCheckSum+0xe>
    sum += buffer[i];
  }
  return -sum;
}
 2aa:	88 27       	eor	r24, r24
 2ac:	99 27       	eor	r25, r25
 2ae:	82 1b       	sub	r24, r18
 2b0:	93 0b       	sbc	r25, r19
 2b2:	08 95       	ret

000002b4 <sendPacket>:

char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
    _packet[PKT_CMD] = cmd;
 2bc:	c2 e0       	ldi	r28, 0x02	; 2
 2be:	d1 e0       	ldi	r29, 0x01	; 1
 2c0:	8b 83       	std	Y+3, r24	; 0x03

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 2c2:	7d 83       	std	Y+5, r23	; 0x05
  *(array+1) = (uint8_t)(value);
 2c4:	6e 83       	std	Y+6, r22	; 0x06
char str[25];
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
 2c6:	ce 01       	movw	r24, r28
 2c8:	e3 df       	rcall	.-58     	; 0x290 <calculateCheckSum>

uint8_t _packet[10] = {0x7E, 0xFF, 0x06, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

void uint16ToArray(uint16_t value, uint8_t *array)
{
  *array = (uint8_t)(value>>8);
 2ca:	9f 83       	std	Y+7, r25	; 0x07
  *(array+1) = (uint8_t)(value);
 2cc:	88 87       	std	Y+8, r24	; 0x08
 2ce:	0c e0       	ldi	r16, 0x0C	; 12
 2d0:	11 e0       	ldi	r17, 0x01	; 1
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
        UART_send(_packet[i]);
 2d2:	89 91       	ld	r24, Y+
 2d4:	50 d0       	rcall	.+160    	; 0x376 <UART_send>
void sendPacket(uint8_t cmd, uint16_t data)
{
    _packet[PKT_CMD] = cmd;
    uint16ToArray(data, (_packet + PKT_PARAM));
    uint16ToArray(calculateCheckSum(_packet), _packet + PKT_CHECKSUM);
    for(int i=0; i<10; i++){
 2d6:	c0 17       	cp	r28, r16
 2d8:	d1 07       	cpc	r29, r17
 2da:	d9 f7       	brne	.-10     	; 0x2d2 <sendPacket+0x1e>
 2dc:	83 ec       	ldi	r24, 0xC3	; 195
 2de:	99 e0       	ldi	r25, 0x09	; 9
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <sendPacket+0x2c>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <sendPacket+0x32>
 2e6:	00 00       	nop
        UART_send(_packet[i]);
    }
    _delay_ms(10);
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	08 95       	ret

000002f2 <speaker_reset>:

void speaker_reset()
{
    sendPacket((uint8_t)0x0C, (uint8_t)0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	8c e0       	ldi	r24, 0x0C	; 12
 2f8:	dd cf       	rjmp	.-70     	; 0x2b4 <sendPacket>
 2fa:	08 95       	ret

000002fc <speaker_setVolume>:
}

void speaker_setVolume(uint8_t vol)
{
    sendPacket((uint8_t)0x06, (uint8_t)vol);
 2fc:	68 2f       	mov	r22, r24
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	86 e0       	ldi	r24, 0x06	; 6
 302:	d8 cf       	rjmp	.-80     	; 0x2b4 <sendPacket>
 304:	08 95       	ret

00000306 <speaker_setEQ>:
}

void speaker_setEQ()
{
    sendPacket((uint8_t)0x07, (uint8_t)0);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	87 e0       	ldi	r24, 0x07	; 7
 30c:	d3 cf       	rjmp	.-90     	; 0x2b4 <sendPacket>
 30e:	08 95       	ret

00000310 <speaker_outputDevice>:
}

void speaker_outputDevice()
{
    sendPacket((uint8_t)0x09, (uint8_t)DFPLAYER_DEVICE_SD);
 310:	62 e0       	ldi	r22, 0x02	; 2
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	89 e0       	ldi	r24, 0x09	; 9
 316:	ce df       	rcall	.-100    	; 0x2b4 <sendPacket>
 318:	8f e4       	ldi	r24, 0x4F	; 79
 31a:	93 ec       	ldi	r25, 0xC3	; 195
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <speaker_outputDevice+0xc>
 320:	00 c0       	rjmp	.+0      	; 0x322 <speaker_outputDevice+0x12>
 322:	00 00       	nop
 324:	08 95       	ret

00000326 <speaker_play>:
    _delay_ms(200);
}

void speaker_play(uint8_t file)
{
    sendPacket((uint8_t)0x03, file);
 326:	68 2f       	mov	r22, r24
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	c3 cf       	rjmp	.-122    	; 0x2b4 <sendPacket>
 32e:	08 95       	ret

00000330 <speaker_begin>:
}

void speaker_begin()
{
    speaker_reset();
 330:	e0 df       	rcall	.-64     	; 0x2f2 <speaker_reset>
 332:	2f e7       	ldi	r18, 0x7F	; 127
 334:	8a e1       	ldi	r24, 0x1A	; 26
 336:	96 e0       	ldi	r25, 0x06	; 6
 338:	21 50       	subi	r18, 0x01	; 1
 33a:	80 40       	sbci	r24, 0x00	; 0
 33c:	90 40       	sbci	r25, 0x00	; 0
 33e:	e1 f7       	brne	.-8      	; 0x338 <speaker_begin+0x8>
 340:	00 c0       	rjmp	.+0      	; 0x342 <speaker_begin+0x12>
 342:	00 00       	nop
    _delay_ms(2000);

    speaker_setVolume(20);
 344:	84 e1       	ldi	r24, 0x14	; 20
    speaker_setEQ();
 346:	da df       	rcall	.-76     	; 0x2fc <speaker_setVolume>
 348:	de df       	rcall	.-68     	; 0x306 <speaker_setEQ>
    speaker_outputDevice();
 34a:	e2 cf       	rjmp	.-60     	; 0x310 <speaker_outputDevice>
 34c:	08 95       	ret

0000034e <UART_init>:
 34e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
void UART_init()
{
	
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
	UBRR0L = (unsigned char)BAUD_PRESCALER;
 352:	87 e6       	ldi	r24, 0x67	; 103
 354:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 358:	e1 ec       	ldi	r30, 0xC1	; 193
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	88 e1       	ldi	r24, 0x18	; 24
 35e:	80 83       	st	Z, r24
	/* Set frame format: 2 stop bits, 8 data bits */
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
 360:	a2 ec       	ldi	r26, 0xC2	; 194
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	86 e0       	ldi	r24, 0x06	; 6
 366:	8c 93       	st	X, r24
	UCSR0C |= (1<<USBS0); // 2 stop bits
 368:	8c 91       	ld	r24, X
 36a:	88 60       	ori	r24, 0x08	; 8
 36c:	8c 93       	st	X, r24
	
	UCSR0B |= (1<<RXCIE0);
 36e:	80 81       	ld	r24, Z
 370:	80 68       	ori	r24, 0x80	; 128
 372:	80 83       	st	Z, r24
 374:	08 95       	ret

00000376 <UART_send>:
}

void UART_send(unsigned char data)
{
	// Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0)));
 376:	e0 ec       	ldi	r30, 0xC0	; 192
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	90 81       	ld	r25, Z
 37c:	95 ff       	sbrs	r25, 5
 37e:	fd cf       	rjmp	.-6      	; 0x37a <UART_send+0x4>
	// Put data into buffer and send data
	UDR0 = data;
 380:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
